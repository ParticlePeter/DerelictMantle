/*

Boost Software License - Version 1.0 - August 17th,2003

Permission is hereby granted,free of charge,to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use,reproduce,display,distribute,
execute,and transmit the Software,and to prepare derivative works of the
Software,and to permit third-parties to whom the Software is furnished to
do so,all subject to the following:

The copyright notices in the Software and this entire statement,including
the above license grant,this restriction and the following disclaimer,
must be included in all copies of the Software,in whole or in part,and
all derivative works of the Software,unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.mantle.functions;

import derelict.mantle.constants;
import derelict.mantle.types;

/* --------- */
/* Functions */
/* --------- */

extern( Windows ) @nogc nothrow  {

   /* Initialization and Device Functions */
   alias da_grInitAndEnumerateGpus = GR_RESULT function(
      const( GR_APPLICATION_INFO ) * pAppInfo,
      const( GR_ALLOC_CALLBACKS  ) * pAllocCb,
      GR_UINT * pGpuCount,
      GR_PHYSICAL_GPU * gpus ); // gpus[GR_MAX_PHYSICAL_GPUS]

   alias da_grGetGpuInfo = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateDevice = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      const( GR_DEVICE_CREATE_INFO ) * pCreateInfo,
      GR_DEVICE * pDevice );

   alias da_grDestroyDevice = GR_RESULT function(
      GR_DEVICE device );

   /* Extension Discovery Functions */
   alias da_grGetExtensionSupport = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      const( GR_CHAR ) * pExtName );

   /* Queue Functions */
   alias da_grGetDeviceQueue = GR_RESULT function(
      GR_DEVICE  device,
      GR_ENUM    queueType,
      GR_UINT    queueId,
      GR_QUEUE * pQueue );

   alias da_grQueueWaitIdle = GR_RESULT function(
      GR_QUEUE queue );

   alias da_grDeviceWaitIdle = GR_RESULT function(
      GR_DEVICE device );

   alias da_grQueueSubmit = GR_RESULT function(
      GR_QUEUE  queue,
      GR_UINT   cmdBufferCount,
      const( GR_CMD_BUFFER ) * pCmdBuffers,
      GR_UINT   memRefCount,
      const( GR_MEMORY_REF ) * pMemRefs,
      GR_FENCE  fence );

   alias da_grQueueSetGlobalMemReferences = GR_RESULT function(
      GR_QUEUE queue,
      GR_UINT  memRefCount,
      const GR_MEMORY_REF * pMemRefs );

   /* Memory Management Functions */
   alias da_grGetMemoryHeapCount = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT * pCount );

   alias da_grGetMemoryHeapInfo = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   heapId,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grAllocMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MEMORY_ALLOC_INFO ) * pAllocInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grFreeMemory = GR_RESULT function(
      GR_GPU_MEMORY mem );

   alias da_grSetMemoryPriority = GR_RESULT function(
      GR_GPU_MEMORY mem,
      GR_ENUM       priority );

   alias da_grMapMemory = GR_RESULT function(
      GR_GPU_MEMORY mem,
      GR_FLAGS   flags,
      GR_VOID ** ppData );

   alias da_grUnmapMemory = GR_RESULT function(
      GR_GPU_MEMORY mem );

   alias da_grRemapVirtualMemoryPages = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   rangeCount,
      const( GR_VIRTUAL_MEMORY_REMAP_RANGE ) * pRanges,
      GR_UINT   preWaitSemaphoreCount,
      const( GR_QUEUE_SEMAPHORE ) * pPreWaitSemaphores,
      GR_UINT   postSignalSemaphoreCount,
      const( GR_QUEUE_SEMAPHORE ) * pPostSignalSemaphores );

   alias da_grPinSystemMemory = GR_RESULT function(
      GR_DEVICE       device,
      const GR_VOID * pSysMem,
      GR_SIZE         memSize,
      GR_GPU_MEMORY * pMem );

   /* Generic API Object Management Functions */
   alias da_grDestroyObject = GR_RESULT function(
      GR_OBJECT object );

   alias da_grGetObjectInfo = GR_RESULT function(
      GR_BASE_OBJECT object,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grBindObjectMemory = GR_RESULT function(
      GR_OBJECT     object,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   /* Image and Sampler Functions */
   alias da_grGetFormatInfo = GR_RESULT function(
      GR_DEVICE device,
      GR_FORMAT format,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateImage = GR_RESULT function(
      GR_DEVICE  device,
      const( GR_IMAGE_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE * pImage );
   
   alias da_grGetImageSubresourceInfo = GR_RESULT function(
      GR_IMAGE  image,
      const( GR_IMAGE_SUBRESOURCE ) * pSubresource,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateSampler = GR_RESULT function(
      GR_DEVICE device,
      const( GR_SAMPLER_CREATE_INFO ) * pCreateInfo,
      GR_SAMPLER * pSampler );

   /* Image View Functions */
   alias da_grCreateImageView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_IMAGE_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE_VIEW * pView );

   alias da_grCreateColorTargetView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COLOR_TARGET_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_COLOR_TARGET_VIEW * pView );

   alias da_grCreateDepthStencilView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DEPTH_STENCIL_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_DEPTH_STENCIL_VIEW * pView );

   /* Shader and Pipeline Functions */
   alias da_grCreateShader = GR_RESULT function(
      GR_DEVICE device,
      const( GR_SHADER_CREATE_INFO ) * pCreateInfo,
      GR_SHADER * pShader );

   alias da_grCreateGraphicsPipeline = GR_RESULT function(
      GR_DEVICE device,
      const( GR_GRAPHICS_PIPELINE_CREATE_INFO ) * pCreateInfo,
      GR_PIPELINE * pPipeline );

   alias da_grCreateComputePipeline = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COMPUTE_PIPELINE_CREATE_INFO ) * pCreateInfo,
      GR_PIPELINE * pPipeline );

   alias da_grStorePipeline = GR_RESULT function(
      GR_PIPELINE pipeline,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grLoadPipeline = GR_RESULT function(
      GR_DEVICE device,
      GR_SIZE   dataSize,
      const GR_VOID * pData,
      GR_PIPELINE * pPipeline );

   /* Descriptor Set Functions */
   alias da_grCreateDescriptorSet = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DESCRIPTOR_SET_CREATE_INFO ) * pCreateInfo,
      GR_DESCRIPTOR_SET * pDescriptorSet );

   alias da_grBeginDescriptorSetUpdate = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet );

   alias da_grEndDescriptorSetUpdate = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet );

   alias da_grAttachSamplerDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_SAMPLER ) * pSamplers );

   alias da_grAttachImageViewDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_IMAGE_VIEW_ATTACH_INFO ) * pImageViews );

   alias da_grAttachMemoryViewDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_MEMORY_VIEW_ATTACH_INFO ) * pMemViews );

   alias da_grAttachNestedDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_DESCRIPTOR_SET_ATTACH_INFO ) * pNestedDescriptorSets );

   alias da_grClearDescriptorSetSlots = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount );

   /* State Object Functions */
   alias da_grCreateViewportState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_VIEWPORT_STATE_CREATE_INFO ) * pCreateInfo,
      GR_VIEWPORT_STATE_OBJECT * pState );

   alias da_grCreateRasterState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_RASTER_STATE_CREATE_INFO ) * pCreateInfo,
      GR_RASTER_STATE_OBJECT * pState );

   alias da_grCreateColorBlendState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COLOR_BLEND_STATE_CREATE_INFO ) * pCreateInfo,
      GR_COLOR_BLEND_STATE_OBJECT * pState );

   alias da_grCreateDepthStencilState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DEPTH_STENCIL_STATE_CREATE_INFO ) * pCreateInfo,
      GR_DEPTH_STENCIL_STATE_OBJECT * pState );

   alias da_grCreateMsaaState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MSAA_STATE_CREATE_INFO ) * pCreateInfo,
      GR_MSAA_STATE_OBJECT * pState );

   /* Query and Synchronization Functions */
   alias da_grCreateQueryPool = GR_RESULT function(
      GR_DEVICE device,
      const GR_QUERY_POOL_CREATE_INFO * pCreateInfo,
      GR_QUERY_POOL * pQueryPool );

   alias da_grGetQueryPoolResults = GR_RESULT function(
      GR_QUERY_POOL queryPool,
      GR_UINT   startQuery,
      GR_UINT   queryCount,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateFence = GR_RESULT function(
      GR_DEVICE device,
      const( GR_FENCE_CREATE_INFO ) * pCreateInfo,
      GR_FENCE * pFence );

   alias da_grGetFenceStatus = GR_RESULT function(
      GR_FENCE fence );

   alias da_grWaitForFences = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   fenceCount,
      const( GR_FENCE ) * pFences,
      GR_BOOL   waitAll,
      GR_FLOAT  timeout );

   alias da_grCreateQueueSemaphore = GR_RESULT function(
      GR_DEVICE device,
      const GR_QUEUE_SEMAPHORE_CREATE_INFO * pCreateInfo,
      GR_QUEUE_SEMAPHORE * pSemaphore );

   alias da_grSignalQueueSemaphore = GR_RESULT function(
      GR_QUEUE queue,
      GR_QUEUE_SEMAPHORE semaphore );

   alias da_grWaitQueueSemaphore = GR_RESULT function(
      GR_QUEUE queue,
      GR_QUEUE_SEMAPHORE semaphore );

   alias da_grCreateEvent = GR_RESULT function(
      GR_DEVICE  device,
      const GR_EVENT_CREATE_INFO * pCreateInfo,
      GR_EVENT * pEvent );

   alias da_grGetEventStatus = GR_RESULT function(
      GR_EVENT event );

   alias da_grSetEvent = GR_RESULT function(
      GR_EVENT event );

   alias da_grResetEvent = GR_RESULT function(
      GR_EVENT event );

   /* Multi-device Management Functions */
   alias da_grGetMultiGpuCompatibility = GR_RESULT function(
      GR_PHYSICAL_GPU gpu0,
      GR_PHYSICAL_GPU gpu1,
      GR_GPU_COMPATIBILITY_INFO * pInfo );

   alias da_grOpenSharedMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MEMORY_OPEN_INFO ) * pOpenInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grOpenSharedQueueSemaphore = GR_RESULT function(
      GR_DEVICE device,
      const( GR_QUEUE_SEMAPHORE_OPEN_INFO ) * pOpenInfo,
      GR_QUEUE_SEMAPHORE * pSemaphore );

   alias da_grOpenPeerMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_PEER_MEMORY_OPEN_INFO ) * pOpenInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grOpenPeerImage = GR_RESULT function(
      GR_DEVICE device,
      const( GR_PEER_IMAGE_OPEN_INFO ) * pOpenInfo,
      GR_IMAGE * pImage,
      GR_GPU_MEMORY * pMem );

   /* Command Buffer Management Functions */
   alias da_grCreateCommandBuffer = GR_RESULT function(
      GR_DEVICE device,
      const( GR_CMD_BUFFER_CREATE_INFO ) * pCreateInfo,
      GR_CMD_BUFFER * pCmdBuffer );

   alias da_grBeginCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer,
      GR_FLAGS      flags );

   alias da_grEndCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer );

   alias da_grResetCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer );

   /* Command Buffer Building Functions */
   alias da_grCmdBindPipeline = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_PIPELINE   pipeline );

   alias da_grCmdBindStateObject = GR_VOID function(
      GR_CMD_BUFFER   cmdBuffer,
      GR_ENUM         stateBindPoint,
      GR_STATE_OBJECT state );

   alias da_grCmdBindDescriptorSet = GR_VOID function(
      GR_CMD_BUFFER     cmdBuffer,
      GR_ENUM           pipelineBindPoint,
      GR_UINT           index,
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT           slotOffset );

   alias da_grCmdBindDynamicMemoryView = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      const( GR_MEMORY_VIEW_ATTACH_INFO ) * pMemView );

   alias da_grCmdBindIndexData = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset,
      GR_ENUM       indexType );

   alias da_grCmdBindTargets = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT       colorTargetCount,
      const( GR_COLOR_TARGET_BIND_INFO  ) * pColorTargets,
      const( GR_DEPTH_STENCIL_BIND_INFO ) * pDepthTarget );

   alias da_grCmdPrepareMemoryRegions = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT transitionCount,
      const( GR_MEMORY_STATE_TRANSITION ) * pStateTransitions );

   alias da_grCmdPrepareImages = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT transitionCount,
      const( GR_IMAGE_STATE_TRANSITION ) * pStateTransitions );

   alias da_grCmdDraw = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT firstVertex,
      GR_UINT vertexCount,
      GR_UINT firstInstance,
      GR_UINT instanceCount );

   alias da_grCmdDrawIndexed = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT firstIndex,
      GR_UINT indexCount,
      GR_INT  vertexOffset,
      GR_UINT firstInstance,
      GR_UINT instanceCount );

   alias da_grCmdDrawIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdDrawIndexedIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdDispatch = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT x,
      GR_UINT y,
      GR_UINT z );

   alias da_grCmdDispatchIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdCopyMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY srcMem,
      GR_GPU_MEMORY destMem,
      GR_UINT       regionCount,
      const( GR_MEMORY_COPY ) * pRegions );

   alias da_grCmdCopyImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_IMAGE_COPY ) * pRegions );

   alias da_grCmdCopyMemoryToImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY srcMem,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_MEMORY_IMAGE_COPY ) * pRegions );

   alias da_grCmdCopyImageToMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_GPU_MEMORY destMem,
      GR_UINT       regionCount,
      const( GR_MEMORY_IMAGE_COPY ) * pRegions );

   alias da_grCmdResolveImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_IMAGE_RESOLVE ) * pRegions );

   alias da_grCmdCloneImageData = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_ENUM       srcImageState,
      GR_IMAGE      destImage,
      GR_ENUM       destImageState );

   alias da_grCmdUpdateMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_GPU_SIZE   dataSize,
      const( GR_UINT32 ) * pData );

   alias da_grCmdFillMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_GPU_SIZE   fillSize,
      GR_UINT32     data );

   alias da_grCmdClearColorImage = GR_VOID function(
      GR_CMD_BUFFER    cmdBuffer,
      GR_IMAGE         image,
      const GR_FLOAT * color, //color[4]
      GR_UINT          rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdClearColorImageRaw = GR_VOID function(
      GR_CMD_BUFFER     cmdBuffer,
      GR_IMAGE          image,
      const GR_UINT32 * color, //color[4]
      GR_UINT           rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdClearDepthStencil = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      image,
      GR_FLOAT      depth,
      GR_UINT8      stencil,
      GR_UINT       rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdSetEvent = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_EVENT      event );

   alias da_grCmdResetEvent = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_EVENT      event );

   alias da_grCmdMemoryAtomic = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_UINT64     srcData,
      GR_ENUM       atomicOp );
      
   alias da_grCmdBeginQuery = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       slot,
      GR_FLAGS      flags );


   alias da_grCmdEndQuery = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       slot );

   alias da_grCmdResetQueryPool = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       startQuery,
      GR_UINT       queryCount );

   alias da_grCmdWriteTimestamp = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       timestampType,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset );

   alias da_grCmdInitAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      const( GR_UINT32 ) * pData );

   alias da_grCmdLoadAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      GR_GPU_MEMORY srcMem,
      GR_GPU_SIZE   srcOffset );

   alias da_grCmdSaveAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset );

   /* Debug and Validation Functions */
   alias da_grDbgSetValidationLevel = GR_RESULT function(
      GR_DEVICE device,
      GR_ENUM   validationLevel );

   alias da_grDbgRegisterMsgCallback = GR_RESULT function(
      GR_DBG_MSG_CALLBACK_FUNCTION pfnMsgCallback,
      GR_VOID * pUserData );

   alias da_grDbgUnregisterMsgCallback = GR_RESULT function(
      GR_DBG_MSG_CALLBACK_FUNCTION pfnMsgCallback );

   alias da_grDbgSetMessageFilter = GR_RESULT function(
      GR_DEVICE device,
      GR_ENUM   msgCode,
      GR_ENUM   filter );

   alias da_grDbgSetObjectTag = GR_RESULT function(
      GR_BASE_OBJECT object,
      GR_SIZE tagSize,
      const( GR_VOID ) * pTag );

   alias da_grDbgSetGlobalOption = GR_RESULT function(
      GR_DBG_GLOBAL_OPTION dbgOption,
      GR_SIZE dataSize,
      const( GR_VOID ) * pData);

   alias da_grDbgSetDeviceOption = GR_RESULT function(
      GR_DEVICE device,
      GR_DBG_DEVICE_OPTION dbgOption,
      GR_SIZE dataSize,
      const( GR_VOID ) * pData);

   alias da_grCmdDbgMarkerBegin = GR_RESULT function(
      GR_CMD_BUFFER   cmdBuffer,
      const GR_CHAR * pMarker );

   alias da_grCmdDbgMarkerEnd = GR_RESULT function(
      GR_CMD_BUFFER   cmdBuffer );


}


__gshared  {
   da_grInitAndEnumerateGpus           grInitAndEnumerateGpus;
   da_grGetGpuInfo                     grGetGpuInfo;
   da_grCreateDevice                   grCreateDevice;
   da_grDestroyDevice                  grDestroyDevice;
   da_grGetExtensionSupport            grGetExtensionSupport;
   da_grGetDeviceQueue                 grGetDeviceQueue;
   da_grQueueWaitIdle                  grQueueWaitIdle;
   da_grDeviceWaitIdle                 grDeviceWaitIdle;
   da_grQueueSubmit                    grQueueSubmit;
   da_grQueueSetGlobalMemReferences    grQueueSetGlobalMemReferences;
   da_grGetMemoryHeapCount             grGetMemoryHeapCount;
   da_grGetMemoryHeapInfo              grGetMemoryHeapInfo;
   da_grAllocMemory                    grAllocMemory;
   da_grFreeMemory                     grFreeMemory;
   da_grSetMemoryPriority              grSetMemoryPriority;
   da_grMapMemory                      grMapMemory;
   da_grUnmapMemory                    grUnmapMemory;
   da_grRemapVirtualMemoryPages        grRemapVirtualMemoryPages;
   da_grPinSystemMemory                grPinSystemMemory;
   da_grDestroyObject                  grDestroyObject;
   da_grGetObjectInfo                  grGetObjectInfo;
   da_grBindObjectMemory               grBindObjectMemory;
   da_grGetFormatInfo                  grGetFormatInfo;
   da_grCreateImage                    grCreateImage;
   da_grGetImageSubresourceInfo        grGetImageSubresourceInfo;
   da_grCreateSampler                  grCreateSampler;
   da_grCreateImageView                grCreateImageView;
   da_grCreateColorTargetView          grCreateColorTargetView;
   da_grCreateDepthStencilView         grCreateDepthStencilView;
   da_grCreateShader                   grCreateShader;
   da_grCreateGraphicsPipeline         grCreateGraphicsPipeline;
   da_grCreateComputePipeline          grCreateComputePipeline;
   da_grStorePipeline                  grStorePipeline;
   da_grLoadPipeline                   grLoadPipeline;
   da_grCreateDescriptorSet            grCreateDescriptorSet;
   da_grBeginDescriptorSetUpdate       grBeginDescriptorSetUpdate;
   da_grEndDescriptorSetUpdate         grEndDescriptorSetUpdate;
   da_grAttachSamplerDescriptors       grAttachSamplerDescriptors;
   da_grAttachImageViewDescriptors     grAttachImageViewDescriptors;
   da_grAttachMemoryViewDescriptors    grAttachMemoryViewDescriptors;
   da_grAttachNestedDescriptors        grAttachNestedDescriptors;
   da_grClearDescriptorSetSlots        grClearDescriptorSetSlots;
   da_grCreateViewportState            grCreateViewportState;
   da_grCreateRasterState              grCreateRasterState;
   da_grCreateColorBlendState          grCreateColorBlendState;
   da_grCreateDepthStencilState        grCreateDepthStencilState;
   da_grCreateMsaaState                grCreateMsaaState;
   da_grCreateQueryPool                grCreateQueryPool;
   da_grGetQueryPoolResults            grGetQueryPoolResults;
   da_grCreateFence                    grCreateFence;
   da_grGetFenceStatus                 grGetFenceStatus;
   da_grWaitForFences                  grWaitForFences;
   da_grCreateQueueSemaphore           grCreateQueueSemaphore;
   da_grSignalQueueSemaphore           grSignalQueueSemaphore;
   da_grWaitQueueSemaphore             grWaitQueueSemaphore;
   da_grCreateEvent                    grCreateEvent;
   da_grGetEventStatus                 grGetEventStatus;
   da_grSetEvent                       grSetEvent;
   da_grResetEvent                     grResetEvent;
   da_grGetMultiGpuCompatibility       grGetMultiGpuCompatibility;
   da_grOpenSharedMemory               grOpenSharedMemory;
   da_grOpenSharedQueueSemaphore       grOpenSharedQueueSemaphore;
   da_grOpenPeerMemory                 grOpenPeerMemory;
   da_grOpenPeerImage                  grOpenPeerImage;
   da_grCreateCommandBuffer            grCreateCommandBuffer;
   da_grBeginCommandBuffer             grBeginCommandBuffer;
   da_grEndCommandBuffer               grEndCommandBuffer;
   da_grResetCommandBuffer             grResetCommandBuffer;
   da_grCmdBindPipeline                grCmdBindPipeline;
   da_grCmdBindStateObject             grCmdBindStateObject;
   da_grCmdBindDescriptorSet           grCmdBindDescriptorSet;
   da_grCmdBindDynamicMemoryView       grCmdBindDynamicMemoryView;
   da_grCmdBindIndexData               grCmdBindIndexData;
   da_grCmdBindTargets                 grCmdBindTargets;
   da_grCmdPrepareMemoryRegions        grCmdPrepareMemoryRegions;
   da_grCmdPrepareImages               grCmdPrepareImages;
   da_grCmdDraw                        grCmdDraw;
   da_grCmdDrawIndexed                 grCmdDrawIndexed;
   da_grCmdDrawIndirect                grCmdDrawIndirect;
   da_grCmdDrawIndexedIndirect         grCmdDrawIndexedIndirect;
   da_grCmdDispatch                    grCmdDispatch;
   da_grCmdDispatchIndirect            grCmdDispatchIndirect;
   da_grCmdCopyMemory                  grCmdCopyMemory;
   da_grCmdCopyImage                   grCmdCopyImage;
   da_grCmdCopyMemoryToImage           grCmdCopyMemoryToImage;
   da_grCmdCopyImageToMemory           grCmdCopyImageToMemory;
   da_grCmdResolveImage                grCmdResolveImage;
   da_grCmdCloneImageData              grCmdCloneImageData;
   da_grCmdUpdateMemory                grCmdUpdateMemory;
   da_grCmdFillMemory                  grCmdFillMemory;
   da_grCmdClearColorImage             grCmdClearColorImage;
   da_grCmdClearColorImageRaw          grCmdClearColorImageRaw;
   da_grCmdClearDepthStencil           grCmdClearDepthStencil;
   da_grCmdSetEvent                    grCmdSetEvent;
   da_grCmdResetEvent                  grCmdResetEvent;
   da_grCmdMemoryAtomic                grCmdMemoryAtomic;
   da_grCmdBeginQuery                  grCmdBeginQuery;
   da_grCmdEndQuery                    grCmdEndQuery;
   da_grCmdResetQueryPool              grCmdResetQueryPool;
   da_grCmdWriteTimestamp              grCmdWriteTimestamp;
   da_grCmdInitAtomicCounters          grCmdInitAtomicCounters;
   da_grCmdLoadAtomicCounters          grCmdLoadAtomicCounters;
   da_grCmdSaveAtomicCounters          grCmdSaveAtomicCounters;
   da_grDbgSetValidationLevel          grDbgSetValidationLevel;
   da_grDbgRegisterMsgCallback         grDbgRegisterMsgCallback;
   da_grDbgUnregisterMsgCallback       grDbgUnregisterMsgCallback;
   da_grDbgSetMessageFilter            grDbgSetMessageFilter;
   da_grDbgSetObjectTag                grDbgSetObjectTag;
   da_grDbgSetGlobalOption             grDbgSetGlobalOption;
   da_grDbgSetDeviceOption             grDbgSetDeviceOption;
   da_grCmdDbgMarkerBegin              grCmdDbgMarkerBegin;
   da_grCmdDbgMarkerEnd                grCmdDbgMarkerEnd;

}