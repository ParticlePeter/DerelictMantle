/*

Boost Software License - Version 1.0 - August 17th,2003

Permission is hereby granted,free of charge,to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use,reproduce,display,distribute,
execute,and transmit the Software,and to prepare derivative works of the
Software,and to permit third-parties to whom the Software is furnished to
do so,all subject to the following:

The copyright notices in the Software and this entire statement,including
the above license grant,this restriction and the following disclaimer,
must be included in all copies of the Software,in whole or in part,and
all derivative works of the Software,unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.mantle.types;

import derelict.mantle.constants;

/* ------*/
/* Types */
/* ------*/

/* Types */
alias GR_CHAR                       = char;
alias GR_INT                        = int;
alias GR_INT32                      = int;
alias GR_UINT                       = uint;
alias GR_UINT8                      = ubyte;
alias GR_UINT32                     = uint;
alias GR_UINT64                     = ulong;
alias GR_FLOAT                      = float;
alias GR_BOOL                       = uint;
alias GR_VOID                       = void;
alias GR_SIZE                       = size_t;
alias GR_GPU_SIZE                   = ulong;
alias GR_ENUM                       = int;
alias GR_FLAGS                      = int;
alias GR_SAMPLE_MASK                = uint;  // Guess
alias GR_RESULT                     = uint;

const GR_BOOL GR_TRUE  = 1;
const GR_BOOL GR_FALSE = 0;

/* Object Handles */
alias GR_BASE_OBJECT                = uint;
alias GR_CMD_BUFFER                 = uint;
alias GR_COLOR_BLEND_STATE_OBJECT   = uint;
alias GR_COLOR_TARGET_VIEW          = uint;
alias GR_DEPTH_STENCIL_STATE_OBJECT = uint;
alias GR_DEPTH_STENCIL_VIEW         = uint;
alias GR_DESCRIPTOR_SET             = uint;
alias GR_DEVICE                     = uint;
alias GR_EVENT                      = uint;
alias GR_FENCE                      = uint;
alias GR_GPU_MEMORY                 = uint;
alias GR_IMAGE                      = uint;
alias GR_IMAGE_VIEW                 = uint;
alias GR_MSAA_STATE_OBJECT          = uint;
alias GR_OBJECT                     = uint;
alias GR_PHYSICAL_GPU               = uint;
alias GR_PIPELINE                   = uint;
alias GR_QUERY_POOL                 = uint;
alias GR_QUEUE                      = uint;
alias GR_QUEUE_SEMAPHORE            = uint;
alias GR_RASTER_STATE_OBJECT        = uint;
alias GR_SAMPLER                    = uint;
alias GR_SHADER                     = uint;
alias GR_STATE_OBJECT               = uint;
alias GR_VIEWPORT_STATE_OBJECT      = uint;

/* Enumerations */
alias GR_ATOMIC_OP                        = uint;
alias GR_BORDER_COLOR_TYPE                = uint;
alias GR_BLEND                            = uint;
alias GR_BLEND_FUNC                       = uint;
alias GR_CHANNEL_FORMAT                   = uint;
alias GR_CHANNEL_SWIZZLE                  = uint;
alias GR_COMPARE_FUNC                     = uint;
alias GR_CULL_MODE                        = uint;
alias GR_DESCRIPTOR_SET_SLOT_TYPE         = uint;
alias GR_FACE_ORIENTATION                 = uint;
alias GR_FILL_MODE                        = uint;
alias GR_HEAP_MEMORY_TYPE                 = uint;
alias GR_IMAGE_ASPECT                     = uint;
alias GR_IMAGE_STATE                      = uint;
alias GR_IMAGE_TILING                     = uint;
alias GR_IMAGE_TYPE                       = uint;
alias GR_IMAGE_VIEW_TYPE                  = uint;
alias GR_INDEX_TYPE                       = uint;
alias GR_INFO_TYPE                        = uint;
alias GR_LOGIC_OP                         = uint;
alias GR_MEMORY_PRIORITY                  = uint;
alias GR_MEMORY_STATE                     = uint;
alias GR_NUM_FORMAT                       = uint;
alias GR_PHYSICAL_GPU_TYPE                = uint;
alias GR_PIPELINE_BIND_POINT              = uint;
alias GR_PRIMITIVE_TOPOLOGY               = uint;
alias GR_QUERY_TYPE                       = uint;
alias GR_QUEUE_TYPE                       = uint;
alias GR_STATE_BIND_POINT                 = uint;
alias GR_STENCIL_OP                       = uint;
alias GR_SYSTEM_ALLOC_TYPE                = uint;
alias GR_TEX_ADDRESS                      = uint;
alias GR_TEX_FILTER                       = uint;
alias GR_TIMESTAMP_TYPE                   = uint;
alias GR_VALIDATION_LEVEL                 = uint;

/* Debug and Validation Enumerations */
alias GR_DBG_DATA_TYPE                    = uint;
alias GR_DBG_DEVICE_OPTION                = uint;
alias GR_DBG_GLOBAL_OPTION                = uint;
alias GR_DBG_MSG_FILTER                   = uint;
alias GR_DBG_MSG_TYPE                     = uint;
alias GR_DBG_OBJECT_TYPE                  = uint;

/* Flags */
alias GR_CMD_BUFFER_BUILD_FLAGS           = uint;
alias GR_DEPTH_STENCIL_VIEW_CREATE_FLAGS  = uint;
alias GR_DEVICE_CREATE_FLAGS              = uint;
alias GR_FORMAT_FEATURE_FLAGS             = uint;
alias GR_GPU_COMPATIBILITY_FLAGS          = uint;
alias GR_IMAGE_CREATE_FLAGS               = uint;
alias GR_IMAGE_USAGE_FLAGS                = uint;
alias GR_MEMORY_ALLOC_FLAGS               = uint;
alias GR_MEMORY_HEAP_FLAGS                = uint;
alias GR_MEMORY_PROPERTY_FLAGS            = uint;
alias GR_MEMORY_REF_FLAGS                 = uint;
alias GR_PIPELINE_CREATE_FLAGS            = uint;
alias GR_QUERY_CONTROL_FLAGS              = uint;
alias GR_SEMAPHORE_CREATE_FLAGS           = uint;
alias GR_SHADER_CREATE_FLAGS              = uint;

/* --------------- */
/* Data Structures */
/* --------------- */

struct GR_ALLOC_CALLBACKS  {
   GR_ALLOC_FUNCTION pfnAlloc;
   GR_FREE_FUNCTION  pfnFree;
}

struct GR_APPLICATION_INFO  {
   const GR_CHAR * pAppName;
   GR_UINT32       appVersion;
   const GR_CHAR * pEngineName;
   GR_UINT32       engineVersion;
   GR_UINT32       apiVersion;
}

struct GR_CHANNEL_MAPPING  {
   GR_ENUM r;
   GR_ENUM g;
   GR_ENUM b;
   GR_ENUM a;
}

struct GR_CMD_BUFFER_CREATE_INFO  {
   GR_ENUM queueType;
   GR_FLAGS flags;
}

struct GR_COLOR_BLEND_STATE_CREATE_INFO  {
   GR_COLOR_TARGET_BLEND_STATE[GR_MAX_COLOR_TARGETS] target;
   GR_FLOAT[4] blendConst;
}

struct GR_COLOR_TARGET_BIND_INFO  {
   GR_COLOR_TARGET_VIEW view;
   GR_ENUM colorTargetState;
}

struct GR_COLOR_TARGET_BLEND_STATE  {
   GR_BOOL blendEnable;
   GR_ENUM srcBlendColor;
   GR_ENUM destBlendColor;
   GR_ENUM blendFuncColor;
   GR_ENUM srcBlendAlpha;
   GR_ENUM destBlendAlpha;
   GR_ENUM blendFuncAlpha;
}

struct GR_COLOR_TARGET_VIEW_CREATE_INFO  {
   GR_IMAGE  image;
   GR_FORMAT format;
   GR_UINT   mipLevel;
   GR_UINT   baseArraySlice;
   GR_UINT   arraySize;
}

struct GR_COMPUTE_PIPELINE_CREATE_INFO  {
   GR_PIPELINE_SHADER cs;
   GR_FLAGS flags;
}

struct GR_DEPTH_STENCIL_BIND_INFO  {
   GR_DEPTH_STENCIL_VIEW view;
   GR_ENUM depthState;
   GR_ENUM stencilState;
}

struct GR_DEPTH_STENCIL_OP  {
   GR_ENUM stencilFailOp;
   GR_ENUM stencilPassOp;
   GR_ENUM stencilDepthFailOp;
   GR_ENUM stencilFunc;
   GR_UINT8 stencilRef;
}

struct GR_DEPTH_STENCIL_STATE_CREATE_INFO  {
   GR_BOOL  depthEnable;
   GR_BOOL  depthWriteEnable;
   GR_ENUM  depthFunc;
   GR_BOOL  depthBoundsEnable;
   GR_FLOAT minDepth;
   GR_FLOAT maxDepth;
   GR_BOOL  stencilEnable;
   GR_UINT8 stencilReadMask;
   GR_UINT8 stencilWriteMask;
   GR_DEPTH_STENCIL_OP front;
   GR_DEPTH_STENCIL_OP back;
}

struct GR_DEPTH_STENCIL_VIEW_CREATE_INFO  {
   GR_IMAGE image;
   GR_UINT  mipLevel;
   GR_UINT  baseArraySlice;
   GR_UINT  arraySize;
   GR_FLAGS flags;
}

struct GR_DESCRIPTOR_SET_ATTACH_INFO  {
   GR_DESCRIPTOR_SET descriptorSet;
   GR_UINT slotOffset;
}

struct GR_DESCRIPTOR_SET_CREATE_INFO  {
   GR_UINT slots;
}

struct GR_DESCRIPTOR_SET_MAPPING  {
   GR_UINT descriptorCount;
   const( GR_DESCRIPTOR_SLOT_INFO ) * pDescriptorInfo;
}

struct GR_DESCRIPTOR_SLOT_INFO  {
   GR_ENUM slotObjectType;
   union  {
      GR_UINT shaderEntityIndex;
      const( GR_DESCRIPTOR_SET_MAPPING ) * pNextLevelSet;
   }
}

struct GR_DEVICE_CREATE_INFO  {
   GR_UINT  queueRecordCount;
   const( GR_DEVICE_QUEUE_CREATE_INFO ) * pRequestedQueues;
   GR_UINT              extensionCount;
   const( GR_CHAR * ) * ppEnabledExtensionNames;
   GR_ENUM              maxValidationLevel;
   GR_FLAGS             flags;
}

struct GR_DEVICE_QUEUE_CREATE_INFO  {
   GR_ENUM queueType;
   GR_UINT queueCount;
}

struct GR_DISPATCH_INDIRECT_ARG  {
   GR_UINT32 x;
   GR_UINT32 y;
   GR_UINT32 z;
}

struct GR_DRAW_INDEXED_INDIRECT_ARG  {
   GR_UINT32 indexCount;
   GR_UINT32 instanceCount;
   GR_UINT32 firstIndex;
   GR_INT32  vertexOffset;
   GR_UINT32 firstInstance;
}

struct GR_DRAW_INDIRECT_ARG  {
   GR_UINT32 vertexCount;
   GR_UINT32 instanceCount;
   GR_UINT32 firstVertex;
   GR_UINT32 firstInstance;
}

struct GR_DYNAMIC_MEMORY_VIEW_SLOT_INFO  {
   GR_ENUM slotObjectType;
   GR_UINT shaderEntityIndex;
}

struct GR_EVENT_CREATE_INFO  {
    GR_FLAGS flags;
}

struct GR_EXTENT2D  {
   GR_INT width;
   GR_INT height;
}

struct GR_EXTENT3D  {
   GR_INT width;
   GR_INT height;
   GR_INT depth;
}

struct GR_FENCE_CREATE_INFO  {
   GR_FLAGS flags;
}

struct GR_FORMAT  {
   //GR_UINT32 channelFormat : 16;
   //GR_UINT32 numericFormat : 16;
   ushort channelFormat;
   ushort numericFormat;
}

struct GR_FORMAT_PROPERTIES  {
    GR_FLAGS linearTilingFeatures;
    GR_FLAGS optimalTilingFeatures;
}

struct GR_GPU_COMPATIBILITY_INFO  {
    GR_FLAGS compatibilityFlags;
}

struct GR_GRAPHICS_PIPELINE_CREATE_INFO  {
   GR_PIPELINE_SHADER     vs;
   GR_PIPELINE_SHADER     hs;
   GR_PIPELINE_SHADER     ds;
   GR_PIPELINE_SHADER     gs;
   GR_PIPELINE_SHADER     ps;
   GR_PIPELINE_IA_STATE   iaState;
   GR_PIPELINE_TESS_STATE tessState;
   GR_PIPELINE_RS_STATE   rsState;
   GR_PIPELINE_CB_STATE   cbState;
   GR_PIPELINE_DB_STATE   dbState;
   GR_FLAGS               flags;
}

struct GR_IMAGE_COPY  {
   GR_IMAGE_SUBRESOURCE srcSubresource;
   GR_OFFSET3D          srcOffset;
   GR_IMAGE_SUBRESOURCE destSubresource;
   GR_OFFSET3D          destOffset;
   GR_EXTENT3D          extent;
}

struct GR_IMAGE_CREATE_INFO  {
   GR_ENUM     imageType;
   GR_FORMAT   format;
   GR_EXTENT3D extent;
   GR_UINT     mipLevels;
   GR_UINT     arraySize;
   GR_UINT     samples;
   GR_ENUM     tiling;
   GR_FLAGS    usage;
   GR_FLAGS    flags;
}

struct GR_IMAGE_RESOLVE  {
    GR_IMAGE_SUBRESOURCE srcSubresource;
    GR_OFFSET2D          srcOffset;
    GR_IMAGE_SUBRESOURCE destSubresource;
    GR_OFFSET2D          destOffset;
    GR_EXTENT2D          extent;
}

struct GR_IMAGE_STATE_TRANSITION  {
   GR_IMAGE image;
   GR_ENUM  oldState;
   GR_ENUM  newState;
   GR_IMAGE_SUBRESOURCE_RANGE subresourceRange;
}

struct GR_IMAGE_SUBRESOURCE  {
   GR_ENUM aspect;
   GR_UINT mipLevel;
   GR_UINT arraySlice;
}

struct GR_IMAGE_SUBRESOURCE_RANGE  {
   GR_ENUM aspect;
   GR_UINT baseMipLevel;
   GR_UINT mipLevels;
   GR_UINT baseArraySlice;
   GR_UINT arraySize;
}

struct GR_IMAGE_VIEW_ATTACH_INFO  {
   GR_IMAGE_VIEW view;
   GR_ENUM       state;
}

struct GR_IMAGE_VIEW_CREATE_INFO  {
   GR_IMAGE                   image;
   GR_ENUM                    viewType;
   GR_FORMAT                  format;
   GR_CHANNEL_MAPPING         channels;
   GR_IMAGE_SUBRESOURCE_RANGE subresourceRange;
   GR_FLOAT                   minLod;
}

struct GR_LINK_CONST_BUFFER  {
   GR_UINT bufferId;
   GR_SIZE bufferSize;
   const( GR_VOID ) * pBufferData;
}

struct GR_MEMORY_ALLOC_INFO  {
   GR_GPU_SIZE                  size;
   GR_GPU_SIZE                  alignment;
   GR_FLAGS                     flags;
   GR_UINT                      heapCount;
   GR_UINT[GR_MAX_MEMORY_HEAPS] heaps;
   GR_ENUM                      memPriority;
}

struct GR_MEMORY_COPY  {
   GR_GPU_SIZE srcOffset;
   GR_GPU_SIZE destOffset;
   GR_GPU_SIZE copySize;
}

struct GR_MEMORY_HEAP_PROPERTIES  {
   GR_ENUM     heapMemoryType;
   GR_GPU_SIZE heapSize;
   GR_GPU_SIZE pageSize;
   GR_FLAGS    flags;
   GR_FLOAT    gpuReadPerfRating;
   GR_FLOAT    gpuWritePerfRating;
   GR_FLOAT    cpuReadPerfRating;
   GR_FLOAT    cpuWritePerfRating;
}

struct GR_MEMORY_IMAGE_COPY  {
   GR_GPU_SIZE          memOffset;
   GR_IMAGE_SUBRESOURCE imageSubresource;
   GR_OFFSET3D          imageOffset;
   GR_EXTENT3D          imageExtent;
}

struct GR_MEMORY_OPEN_INFO  {
    GR_GPU_MEMORY sharedMem;
}

struct GR_MEMORY_REF  {
   GR_GPU_MEMORY mem;
   GR_FLAGS      flags;
}

struct GR_MEMORY_REQUIREMENTS  {
   GR_GPU_SIZE size;
   GR_GPU_SIZE alignment;
   GR_UINT     heapCount;
   GR_UINT[GR_MAX_MEMORY_HEAPS] heaps;
}

struct GR_MEMORY_STATE_TRANSITION  {
   GR_GPU_MEMORY mem;
   GR_ENUM       oldState;
   GR_ENUM       newState;
   GR_GPU_SIZE   offset;
   GR_GPU_SIZE   regionSize;
}

struct GR_MEMORY_VIEW_ATTACH_INFO  {
   GR_GPU_MEMORY mem;
   GR_GPU_SIZE   offset;
   GR_GPU_SIZE   range;
   GR_GPU_SIZE   stride;
   GR_FORMAT     format;
   GR_ENUM       state;
}

struct GR_MSAA_STATE_CREATE_INFO  {
   GR_UINT        samples;
   GR_SAMPLE_MASK sampleMask;
}

struct GR_OFFSET2D  {
   GR_INT x;
   GR_INT y;
}

struct GR_OFFSET3D  {
   GR_INT x;
   GR_INT y;
   GR_INT z;
}

struct GR_PARENT_DEVICE  {
   GR_DEVICE device;
}

struct GR_PARENT_PHYSICAL_GPU  {
   GR_PHYSICAL_GPU gpu;
}

struct GR_PEER_IMAGE_OPEN_INFO  {
   GR_IMAGE originalImage;
}

struct GR_PEER_MEMORY_OPEN_INFO  {
   GR_GPU_MEMORY originalMem;
}

struct GR_PHYSICAL_GPU_IMAGE_PROPERTIES  {
   GR_UINT     maxSliceWidth;
   GR_UINT     maxSliceHeight;
   GR_UINT     maxDepth;
   GR_UINT     maxArraySlices;
   GR_UINT     reserved1;
   GR_UINT     reserved2;
   GR_GPU_SIZE maxMemoryAlignment;
   GR_UINT32   sparseImageSupportLevel;
   GR_FLAGS    flags;
}

struct GR_PHYSICAL_GPU_MEMORY_PROPERTIES  {
   GR_FLAGS    flags;
   GR_GPU_SIZE virtualMemPageSize;
   GR_GPU_SIZE maxVirtualMemSize;
   GR_GPU_SIZE maxPhysicalMemSize;
}

struct GR_PHYSICAL_GPU_PERFORMANCE  {
   GR_FLOAT maxGpuClock;
   GR_FLOAT aluPerClock;
   GR_FLOAT texPerClock;
   GR_FLOAT primsPerClock;
   GR_FLOAT pixelsPerClock;
}

struct GR_PHYSICAL_GPU_PROPERTIES  {
   GR_UINT32   apiVersion;
   GR_UINT32   driverVersion;
   GR_UINT32   vendorId;
   GR_UINT32   deviceId;
   GR_ENUM     gpuType;
   GR_CHAR[ GR_MAX_PHYSICAL_GPU_NAME ] gpuName;
   GR_UINT     maxMemRefsPerSubmission;
   GR_GPU_SIZE reserved;
   GR_GPU_SIZE maxInlineMemoryUpdateSize;
   GR_UINT     maxBoundDescriptorSets;
   GR_UINT     maxThreadGroupSize;
   GR_UINT64   timestampFrequency;
   GR_BOOL     multiColorTargetClears;
}

struct GR_PHYSICAL_GPU_QUEUE_PROPERTIES  {
   GR_ENUM queueType;
   GR_UINT queueCount;
   GR_UINT maxAtomicCounters;
   GR_BOOL supportsTimestamps;
}

struct GR_PIPELINE_CB_STATE  {
   GR_BOOL alphaToCoverageEnable;
   GR_BOOL dualSourceBlendEnable;
   GR_ENUM logicOp;
   GR_PIPELINE_CB_TARGET_STATE[GR_MAX_COLOR_TARGETS] target;
}

struct GR_PIPELINE_CB_TARGET_STATE  {
   GR_BOOL   blendEnable;
   GR_FORMAT format;
   GR_UINT8  channelWriteMask;
}

struct GR_PIPELINE_DB_STATE  {
   GR_FORMAT format;
}

struct GR_PIPELINE_IA_STATE  {
   GR_ENUM topology;
   GR_BOOL disableVertexReuse;
}

struct GR_PIPELINE_RS_STATE  {
   GR_BOOL depthClipEnable;
}

struct GR_PIPELINE_SHADER  {
   GR_SHADER shader;
   GR_DESCRIPTOR_SET_MAPPING[GR_MAX_DESCRIPTOR_SETS] descriptorSetMapping;
   GR_UINT linkConstBufferCount;
   const( GR_LINK_CONST_BUFFER ) * pLinkConstBufferInfo;
   GR_DYNAMIC_MEMORY_VIEW_SLOT_INFO dynamicMemoryViewMapping;
}

struct GR_PIPELINE_STATISTICS_DATA  {
   GR_UINT64 psInvocations;
   GR_UINT64 cPrimitives;
   GR_UINT64 cInvocations;
   GR_UINT64 vsInvocations;
   GR_UINT64 gsInvocations;
   GR_UINT64 gsPrimitives;
   GR_UINT64 iaPrimitives;
   GR_UINT64 iaVertices;
   GR_UINT64 hsInvocations;
   GR_UINT64 dsInvocations;
   GR_UINT64 csInvocations;
}

struct GR_PIPELINE_TESS_STATE  {
   GR_UINT  patchControlPoints;
   GR_FLOAT optimalTessFactor;
}

struct GR_QUERY_POOL_CREATE_INFO  {
    GR_ENUM queryType;
    GR_UINT slots;
}

struct GR_QUEUE_SEMAPHORE_CREATE_INFO  {
    GR_UINT  initialCount;
    GR_FLAGS flags;
}

struct GR_QUEUE_SEMAPHORE_OPEN_INFO  {
    GR_QUEUE_SEMAPHORE sharedSemaphore;
}

struct GR_RASTER_STATE_CREATE_INFO  {
   GR_ENUM  fillMode;
   GR_ENUM  cullMode;
   GR_ENUM  frontFace;
   GR_INT   depthBias;
   GR_FLOAT depthBiasClamp;
   GR_FLOAT slopeScaledDepthBias;
}

struct GR_RECT  {
   GR_OFFSET2D offset;
   GR_EXTENT2D extent;
}

struct GR_SAMPLER_CREATE_INFO  {
   GR_ENUM  filter;
   GR_ENUM  addressU;
   GR_ENUM  addressV;
   GR_ENUM  addressW;
   GR_FLOAT mipLodBias;
   GR_UINT  maxAnisotropy;
   GR_ENUM  compareFunc;
   GR_FLOAT minLod;
   GR_FLOAT maxLod;
   GR_ENUM  borderColor;
}

struct GR_SHADER_CREATE_INFO  {
   GR_SIZE            codeSize;
   const( GR_VOID ) * pCode;
   GR_FLAGS           flags;
}

struct GR_SUBRESOURCE_LAYOUT  {
    GR_GPU_SIZE offset;
    GR_GPU_SIZE size;
    GR_GPU_SIZE rowPitch;
    GR_GPU_SIZE depthPitch;
}

struct GR_VIEWPORT  {
   GR_FLOAT originX;
   GR_FLOAT originY;
   GR_FLOAT width;
   GR_FLOAT height;
   GR_FLOAT minDepth;
   GR_FLOAT maxDepth;
}

struct GR_VIEWPORT_STATE_CREATE_INFO  {
   GR_UINT viewportCount;
   GR_BOOL scissorEnable;
   GR_VIEWPORT[GR_MAX_VIEWPORTS] viewports;
   GR_RECT[GR_MAX_VIEWPORTS]     scissors;
}

struct GR_VIRTUAL_MEMORY_REMAP_RANGE  {
    GR_GPU_MEMORY virtualMem;
    GR_GPU_SIZE   virtualStartPage;
    GR_GPU_MEMORY realMem;
    GR_GPU_SIZE   realStartPage;
    GR_GPU_SIZE   pageCount;
}

/* --------- */
/* Callbacks */
/* --------- */

extern( Windows ) nothrow  {

   alias GR_VOID * function(
      GR_SIZE size,
      GR_SIZE alignment,
      GR_ENUM allocType
   )  GR_ALLOC_FUNCTION;

   alias GR_VOID function(
      GR_VOID * pMem
   )  GR_FREE_FUNCTION;

   /* Debug and Validation API */
   alias GR_VOID function(
      GR_ENUM msgType,
      GR_ENUM validationLevel,
      GR_BASE_OBJECT srcObject,
      GR_SIZE location,
      GR_ENUM msgCode,
      const( GR_CHAR ) * pMsg,
      GR_VOID * pUserData
   )  GR_DBG_MSG_CALLBACK_FUNCTION;
}
