/*

Boost Software License - Version 1.0 - August 17th,2003

Permission is hereby granted,free of charge,to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use,reproduce,display,distribute,
execute,and transmit the Software,and to prepare derivative works of the
Software,and to permit third-parties to whom the Software is furnished to
do so,all subject to the following:

The copyright notices in the Software and this entire statement,including
the above license grant,this restriction and the following disclaimer,
must be included in all copies of the Software,in whole or in part,and
all derivative works of the Software,unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.mantle.mantle;


private {
   import derelict.util.loader;
   import derelict.util.system;
   import derelict.util.exception;
   
   static if( Derelict_OS_Windows )
      enum libNames = "mantle32.dll,mantleaxl32.dll";
   else
      static assert( 0,"Need to implement GLFW libNames for this operating system." );
}


/* ------------------- */
/* types and constants */
/* ------------------- */

alias GR_BYTE                       = byte;
alias GR_CHAR                       = char;
alias GR_INT                        = int;
alias GR_INT32                      = int;
alias GR_UINT                       = uint;
alias GR_UINT8                      = ubyte;
alias GR_UINT32                     = uint;
alias GR_UINT64                     = ulong;
alias GR_FLOAT                      = float;
alias GR_BOOL                       = uint;
alias GR_VOID                       = void;
  
alias GR_SIZE                       = size_t;
alias GR_GPU_SIZE                   = ulong;

alias GR_ENUM                       = int;
alias GR_FLAGS                      = int;
alias GR_SAMPLE_MASK                = uint;  // Guess

alias GR_RESULT                     = uint;

/* Object Handles */
alias GR_BASE_OBJECT                = uint;
alias GR_CMD_BUFFER                 = uint;
alias GR_COLOR_BLEND_STATE_OBJECT   = uint;
alias GR_COLOR_TARGET_VIEW          = uint;
alias GR_DEPTH_STENCIL_STATE_OBJECT = uint;
alias GR_DEPTH_STENCIL_VIEW         = uint;
alias GR_DESCRIPTOR_SET             = uint;
alias GR_DEVICE                     = uint;
alias GR_EVENT                      = uint;
alias GR_FENCE                      = uint;
alias GR_GPU_MEMORY                 = uint;
alias GR_IMAGE                      = uint;
alias GR_IMAGE_VIEW                 = uint;
alias GR_MSAA_STATE_OBJECT          = uint;
alias GR_OBJECT                     = uint;
alias GR_PHYSICAL_GPU               = uint;
alias GR_PIPELINE                   = uint;
alias GR_QUERY_POOL                 = uint;
alias GR_QUEUE                      = uint;
alias GR_QUEUE_SEMAPHORE            = uint;
alias GR_RASTER_STATE_OBJECT        = uint;
alias GR_SAMPLER                    = uint;
alias GR_SHADER                     = uint;
alias GR_STATE_OBJECT               = uint;
alias GR_VIEWPORT_STATE_OBJECT      = uint;

const ulong GR_NULL_HANDLE          = 0;

const int GR_MAX_PHYSICAL_GPUS      = 4;
const int GR_API_VERSION            = 1;
const int GR_MAX_PHYSICAL_GPU_NAME  = 255;   // Guess
const int GR_MAX_VIEWPORTS          = 16;    // Guess
const int GR_MAX_MEMORY_HEAPS       = 8;
const int GR_MAX_COLOR_TARGETS      = 16;    // Guess
const int GR_MAX_DESCRIPTOR_SETS    = 2;

const GR_BOOL GR_TRUE  = 1;
const GR_BOOL GR_FALSE = 0;

/* Enumerations */
alias GR_ATOMIC_OP                        = uint;
alias GR_BORDER_COLOR_TYPE                = uint;
alias GR_BLEND                            = uint;
alias GR_BLEND_FUNC                       = uint;
alias GR_CHANNEL_FORMAT                   = uint;
alias GR_CHANNEL_SWIZZLE                  = uint;
alias GR_COMPARE_FUNC                     = uint;
alias GR_CULL_MODE                        = uint;
alias GR_DESCRIPTOR_SET_SLOT_TYPE         = uint;
alias GR_FACE_ORIENTATION                 = uint;
alias GR_FILL_MODE                        = uint;
alias GR_HEAP_MEMORY_TYPE                 = uint;
alias GR_IMAGE_ASPECT                     = uint;
alias GR_IMAGE_STATE                      = uint;
alias GR_IMAGE_TILING                     = uint;
alias GR_IMAGE_TYPE                       = uint;
alias GR_IMAGE_VIEW_TYPE                  = uint;
alias GR_INDEX_TYPE                       = uint;
alias GR_INFO_TYPE                        = uint;
alias GR_LOGIC_OP                         = uint;
alias GR_MEMORY_PRIORITY                  = uint;
alias GR_MEMORY_STATE                     = uint;
alias GR_NUM_FORMAT                       = uint;
alias GR_PHYSICAL_GPU_TYPE                = uint;
alias GR_PIPELINE_BIND_POINT              = uint;
alias GR_PRIMITIVE_TOPOLOGY               = uint;
alias GR_QUERY_TYPE                       = uint;
alias GR_QUEUE_TYPE                       = uint;
alias GR_STATE_BIND_POINT                 = uint;
alias GR_STENCIL_OP                       = uint;
alias GR_SYSTEM_ALLOC_TYPE                = uint;
alias GR_TEX_ADDRESS                      = uint;
alias GR_TEX_FILTER                       = uint;
alias GR_TIMESTAMP_TYPE                   = uint;
alias GR_VALIDATION_LEVEL                 = uint;

/* Debug and Validation Enumerations */
alias GR_DBG_DATA_TYPE                    = uint;
alias GR_DBG_DEVICE_OPTION                = uint;
alias GR_DBG_GLOBAL_OPTION                = uint;
alias GR_DBG_MSG_FILTER                   = uint;
alias GR_DBG_MSG_TYPE                     = uint;
alias GR_DBG_OBJECT_TYPE                  = uint;

/* Flags */
alias GR_CMD_BUFFER_BUILD_FLAGS           = uint;
alias GR_DEPTH_STENCIL_VIEW_CREATE_FLAGS  = uint;
alias GR_DEVICE_CREATE_FLAGS              = uint;
alias GR_FORMAT_FEATURE_FLAGS             = uint;
alias GR_GPU_COMPATIBILITY_FLAGS          = uint;
alias GR_IMAGE_CREATE_FLAGS               = uint;
alias GR_IMAGE_USAGE_FLAGS                = uint;
alias GR_MEMORY_ALLOC_FLAGS               = uint;
alias GR_MEMORY_HEAP_FLAGS                = uint;
alias GR_MEMORY_PROPERTY_FLAGS            = uint;
alias GR_MEMORY_REF_FLAGS                 = uint;
alias GR_PIPELINE_CREATE_FLAGS            = uint;
alias GR_QUERY_CONTROL_FLAGS              = uint;
alias GR_SEMAPHORE_CREATE_FLAGS           = uint;
alias GR_SHADER_CREATE_FLAGS              = uint;



/* ------------ */
/* Enumerations */
/* ------------ */

enum /*GR_ATOMIC_OP*/  {
   GR_ATOMIC_ADD_INT32     = 0x2d00,
   GR_ATOMIC_SUB_INT32     = 0x2d01,
   GR_ATOMIC_MIN_UINT32    = 0x2d02,
   GR_ATOMIC_MAX_UINT32    = 0x2d03,
   GR_ATOMIC_MIN_SINT32    = 0x2d04,
   GR_ATOMIC_MAX_SINT32    = 0x2d05,
   GR_ATOMIC_AND_INT32     = 0x2d06,
   GR_ATOMIC_OR_INT32      = 0x2d07,
   GR_ATOMIC_XOR_INT32     = 0x2d08,
   GR_ATOMIC_INC_UINT32    = 0x2d09,
   GR_ATOMIC_DEC_UINT32    = 0x2d0a,
   GR_ATOMIC_ADD_INT64     = 0x2d0b,
   GR_ATOMIC_SUB_INT64     = 0x2d0c,
   GR_ATOMIC_MIN_UINT64    = 0x2d0d,
   GR_ATOMIC_MAX_UINT64    = 0x2d0e,
   GR_ATOMIC_MIN_SINT64    = 0x2d0f,
   GR_ATOMIC_MAX_SINT64    = 0x2d10,
   GR_ATOMIC_AND_INT64     = 0x2d11,
   GR_ATOMIC_OR_INT64      = 0x2d12,
   GR_ATOMIC_XOR_INT64     = 0x2d13,
   GR_ATOMIC_INC_UINT64    = 0x2d14,
   GR_ATOMIC_DEC_UINT64    = 0x2d15,
}

enum /*GR_BORDER_COLOR_TYPE*/  {
   GR_BORDER_COLOR_WHITE             = 0x1c00,
   GR_BORDER_COLOR_TRANSPARENT_BLACK = 0x1c01,
   GR_BORDER_COLOR_OPAQUE_BLACK      = 0x1c02,
}

enum /*GR_BLEND*/  {
   GR_BLEND_ZERO                       = 0x2900,
   GR_BLEND_ONE                        = 0x2901,
   GR_BLEND_SRC_COLOR                  = 0x2902,
   GR_BLEND_ONE_MINUS_SRC_COLOR        = 0x2903,
   GR_BLEND_DEST_COLOR                 = 0x2904,
   GR_BLEND_ONE_MINUS_DEST_COLOR       = 0x2905,
   GR_BLEND_SRC_ALPHA                  = 0x2906,
   GR_BLEND_ONE_MINUS_SRC_ALPHA        = 0x2907,
   GR_BLEND_DEST_ALPHA                 = 0x2908,
   GR_BLEND_ONE_MINUS_DEST_ALPHA       = 0x2909,
   GR_BLEND_CONSTANT_COLOR             = 0x290a,
   GR_BLEND_ONE_MINUS_CONSTANT_COLOR   = 0x290b,
   GR_BLEND_CONSTANT_ALPHA             = 0x290c,
   GR_BLEND_ONE_MINUS_CONSTANT_ALPHA   = 0x290d,
   GR_BLEND_SRC_ALPHA_SATURATE         = 0x290e,
   GR_BLEND_SRC1_COLOR                 = 0x290f,
   GR_BLEND_ONE_MINUS_SRC1_COLOR       = 0x2910,
   GR_BLEND_SRC1_ALPHA                 = 0x2911,
   GR_BLEND_ONE_MINUS_SRC1_ALPHA       = 0x2912,
}

enum /*GR_BLEND_FUNC*/  {
   GR_BLEND_FUNC_ADD               = 0x2a00,
   GR_BLEND_FUNC_SUBTRACT          = 0x2a01,
   GR_BLEND_FUNC_REVERSE_SUBTRACT  = 0x2a02,
   GR_BLEND_FUNC_MIN               = 0x2a03,
   GR_BLEND_FUNC_MAX               = 0x2a04,
}

enum /*GR_CHANNEL_FORMAT*/  {
   GR_CH_FMT_UNDEFINED     = 0u,
   GR_CH_FMT_R4G4          = 1u,
   GR_CH_FMT_R4G4B4A4      = 2u,
   GR_CH_FMT_R5G6B5        = 3u,
   GR_CH_FMT_B5G6R5        = 4u,
   GR_CH_FMT_R5G5B5A1      = 5u,
   GR_CH_FMT_R8            = 6u,
   GR_CH_FMT_R8G8          = 7u,
   GR_CH_FMT_R8G8B8A8      = 8u,
   GR_CH_FMT_B8G8R8A8      = 9u,
   GR_CH_FMT_R10G11B11     = 10u,
   GR_CH_FMT_R11G11B10     = 11u,
   GR_CH_FMT_R10G10B10A2   = 12u,
   GR_CH_FMT_R16           = 13u,
   GR_CH_FMT_R16G16        = 14u,
   GR_CH_FMT_R16G16B16A16  = 15u,
   GR_CH_FMT_R32           = 16u,
   GR_CH_FMT_R32G32        = 17u,
   GR_CH_FMT_R32G32B32     = 18u,
   GR_CH_FMT_R32G32B32A32  = 19u,
   GR_CH_FMT_R16G8         = 20u,
   GR_CH_FMT_R32G8         = 21u,
   GR_CH_FMT_R9G9B9E5      = 22u,
   GR_CH_FMT_BC1           = 23u,
   GR_CH_FMT_BC2           = 24u,
   GR_CH_FMT_BC3           = 25u,
   GR_CH_FMT_BC4           = 26u,
   GR_CH_FMT_BC5           = 27u,
   GR_CH_FMT_BC6U          = 28u,
   GR_CH_FMT_BC6S          = 29u,
   GR_CH_FMT_BC7           = 30u,
}

enum /*GR_CHANNEL_SWIZZLE*/  {
   GR_CHANNEL_SWIZZLE_ZERO = 0x1800,
   GR_CHANNEL_SWIZZLE_ONE  = 0x1801,
   GR_CHANNEL_SWIZZLE_R    = 0x1802,
   GR_CHANNEL_SWIZZLE_G    = 0x1803,
   GR_CHANNEL_SWIZZLE_B    = 0x1804,
   GR_CHANNEL_SWIZZLE_A    = 0x1805,
}

enum /*GR_COMPARE_FUNC*/  {
    GR_COMPARE_NEVER            = 0x2500,
    GR_COMPARE_LESS             = 0x2501,
    GR_COMPARE_EQUAL            = 0x2502,
    GR_COMPARE_LESS_EQUAL       = 0x2503,
    GR_COMPARE_GREATER          = 0x2504,
    GR_COMPARE_NOT_EQUAL        = 0x2505,
    GR_COMPARE_GREATER_EQUAL    = 0x2506,
    GR_COMPARE_ALWAYS           = 0x2507,
}

enum /*GR_CULL_MODE*/  {
   GR_CULL_NONE        = 0x2700,
   GR_CULL_FRONT       = 0x2701,
   GR_CULL_BACK        = 0x2702,
}

enum /*GR_DESCRIPTOR_SET_SLOT_TYPE*/  {
   GR_SLOT_UNUSED              = 0x1900,
   GR_SLOT_SHADER_RESOURCE     = 0x1901,
   GR_SLOT_SHADER_UAV          = 0x1902,
   GR_SLOT_SHADER_SAMPLER      = 0x1903,
   GR_SLOT_NEXT_DESCRIPTOR_SET = 0x1904,
}

enum /*GR_FACE_ORIENTATION*/  {
   GR_FRONT_FACE_CCW   = 0x2800,
   GR_FRONT_FACE_CW    = 0x2801,
}

enum /*GR_FILL_MODE*/  {
   GR_FILL_SOLID       = 0x2600,
   GR_FILL_WIREFRAME   = 0x2601,
}

enum /*GR_HEAP_MEMORY_TYPE*/  {
    GR_HEAP_MEMORY_OTHER    = 0x2f00,
    GR_HEAP_MEMORY_LOCAL    = 0x2f01,
    GR_HEAP_MEMORY_REMOTE   = 0x2f02,
    GR_HEAP_MEMORY_EMBEDDED = 0x2f03,
}

enum /*GR_IMAGE_ASPECT*/  {
   GR_IMAGE_ASPECT_COLOR   = 0x1700,
   GR_IMAGE_ASPECT_DEPTH   = 0x1701,
   GR_IMAGE_ASPECT_STENCIL = 0x1702,
}

enum /*GR_IMAGE_STATE*/  {
   GR_IMAGE_STATE_DATA_TRANSFER                = 0x1300,
   GR_IMAGE_STATE_GRAPHICS_SHADER_READ_ONLY    = 0x1301,
   GR_IMAGE_STATE_GRAPHICS_SHADER_WRITE_ONLY   = 0x1302,
   GR_IMAGE_STATE_GRAPHICS_SHADER_READ_WRITE   = 0x1303,
   GR_IMAGE_STATE_COMPUTE_SHADER_READ_ONLY     = 0x1304,
   GR_IMAGE_STATE_COMPUTE_SHADER_WRITE_ONLY    = 0x1305,
   GR_IMAGE_STATE_COMPUTE_SHADER_READ_WRITE    = 0x1306,
   GR_IMAGE_STATE_MULTI_SHADER_READ_ONLY       = 0x1307,
   GR_IMAGE_STATE_TARGET_AND_SHADER_READ_ONLY  = 0x1308,
   GR_IMAGE_STATE_UNINITIALIZED                = 0x1309,
   GR_IMAGE_STATE_TARGET_RENDER_ACCESS_OPTIMAL = 0x130a,
   GR_IMAGE_STATE_TARGET_SHADER_ACCESS_OPTIMAL = 0x130b,
   GR_IMAGE_STATE_CLEAR                        = 0x130c,
   GR_IMAGE_STATE_RESOLVE_SOURCE               = 0x130d,
   GR_IMAGE_STATE_RESOLVE_DESTINATION          = 0x130e,
   GR_IMAGE_STATE_DISCARD                      = 0x131f,
   GR_IMAGE_STATE_DATA_TRANSFER_SOURCE         = 0x1310,
   GR_IMAGE_STATE_DATA_TRANSFER_DESTINATION    = 0x1311,
}

enum /*GR_IMAGE_TILING*/  {
   GR_LINEAR_TILING    = 0x1500,
   GR_OPTIMAL_TILING   = 0x1501,
}

enum /*GR_IMAGE_TYPE*/  {
   GR_IMAGE_1D         = 0x1400,
   GR_IMAGE_2D         = 0x1401,
   GR_IMAGE_3D         = 0x1402,
}

enum /*GR_IMAGE_VIEW_TYPE*/  {
   GR_IMAGE_VIEW_1D    = 0x1600,
   GR_IMAGE_VIEW_2D    = 0x1601,
   GR_IMAGE_VIEW_3D    = 0x1602,
   GR_IMAGE_VIEW_CUBE  = 0x1603,
}

enum /*GR_INDEX_TYPE*/  {
   GR_INDEX_16         = 0x2100,
   GR_INDEX_32         = 0x2101,
}

enum /*GR_INFO_TYPE*/  {
   GR_INFO_TYPE_PHYSICAL_GPU_PROPERTIES            = 0x6100,
   GR_INFO_TYPE_PHYSICAL_GPU_PERFORMANCE           = 0x6101,
   GR_INFO_TYPE_PHYSICAL_GPU_QUEUE_PROPERTIES      = 0x6102,
   GR_INFO_TYPE_PHYSICAL_GPU_MEMORY_PROPERTIES     = 0x6103,
   GR_INFO_TYPE_PHYSICAL_GPU_IMAGE_PROPERTIES      = 0x6104,
   GR_INFO_TYPE_MEMORY_HEAP_PROPERTIES             = 0x6200,
   GR_INFO_TYPE_FORMAT_PROPERTIES                  = 0x6300,
   GR_INFO_TYPE_SUBRESOURCE_LAYOUT                 = 0x6400,
   GR_INFO_TYPE_MEMORY_REQUIREMENTS                = 0x6800,
   GR_INFO_TYPE_PARENT_DEVICE                      = 0x6801,
   GR_INFO_TYPE_PARENT_PHYSICAL_GPU                = 0x6802,
}

enum /*GR_LOGIC_OP*/  {
   GR_LOGIC_OP_COPY            = 0x2c00,
   GR_LOGIC_OP_CLEAR           = 0x2c01,
   GR_LOGIC_OP_AND             = 0x2c02,
   GR_LOGIC_OP_AND_REVERSE     = 0x2c03,
   GR_LOGIC_OP_AND_INVERTED    = 0x2c04,
   GR_LOGIC_OP_NOOP            = 0x2c05,
   GR_LOGIC_OP_XOR             = 0x2c06,
   GR_LOGIC_OP_OR              = 0x2c07,
   GR_LOGIC_OP_NOR             = 0x2c08,
   GR_LOGIC_OP_EQUIV           = 0x2c09,
   GR_LOGIC_OP_INVERT          = 0x2c0a,
   GR_LOGIC_OP_OR_REVERSE      = 0x2c0b,
   GR_LOGIC_OP_COPY_INVERTED   = 0x2c0c,
   GR_LOGIC_OP_OR_INVERTED     = 0x2c0d,
   GR_LOGIC_OP_NAND            = 0x2c0e,
   GR_LOGIC_OP_SET             = 0x2c0f,
}

enum /*GR_MEMORY_PRIORITY*/  {
   GR_MEMORY_PRIORITY_NORMAL    = 0x1100,
   GR_MEMORY_PRIORITY_HIGH      = 0x1101,
   GR_MEMORY_PRIORITY_LOW       = 0x1102,
   GR_MEMORY_PRIORITY_UNUSED    = 0x1103,
   GR_MEMORY_PRIORITY_VERY_HIGH = 0x1104,
   GR_MEMORY_PRIORITY_VERY_LOW  = 0x1105,
}

enum /*GR_MEMORY_STATE*/ {
   GR_MEMORY_STATE_DATA_TRANSFER               = 0x1200,
   GR_MEMORY_STATE_GRAPHICS_SHADER_READ_ONLY   = 0x1201,
   GR_MEMORY_STATE_GRAPHICS_SHADER_WRITE_ONLY  = 0x1202,
   GR_MEMORY_STATE_GRAPHICS_SHADER_READ_WRITE  = 0x1203,
   GR_MEMORY_STATE_COMPUTE_SHADER_READ_ONLY    = 0x1204,
   GR_MEMORY_STATE_COMPUTE_SHADER_WRITE_ONLY   = 0x1205,
   GR_MEMORY_STATE_COMPUTE_SHADER_READ_WRITE   = 0x1206,
   GR_MEMORY_STATE_MULTI_USE_READ_ONLY         = 0x1207,
   GR_MEMORY_STATE_INDEX_DATA                  = 0x1208,
   GR_MEMORY_STATE_INDIRECT_ARG                = 0x1209,
   GR_MEMORY_STATE_WRITE_TIMESTAMP             = 0x120a,
   GR_MEMORY_STATE_QUEUE_ATOMIC                = 0x120b,
   GR_MEMORY_STATE_DISCARD                     = 0x120c,
   GR_MEMORY_STATE_DATA_TRANSFER_SOURCE        = 0x120d,
   GR_MEMORY_STATE_DATA_TRANSFER_DESTINATION   = 0x120e,
}

enum /*GR_NUM_FORMAT*/  {
   GR_NUM_FMT_UNDEFINED    = 0u,
   GR_NUM_FMT_UNORM        = 1u,
   GR_NUM_FMT_SNORM        = 2u,
   GR_NUM_FMT_UINT         = 3u,
   GR_NUM_FMT_SINT         = 4u,
   GR_NUM_FMT_FLOAT        = 5u,
   GR_NUM_FMT_SRGB         = 6u,
   GR_NUM_FMT_DS           = 7u,
}

enum /*GR_PHYSICAL_GPU_TYPE*/  {
   GR_GPU_TYPE_OTHER                = 0x3000,
   GR_GPU_TYPE_INTEGRATED           = 0x3001,
   GR_GPU_TYPE_DISCRETE             = 0x3002,
   GR_GPU_TYPE_VIRTUAL              = 0x3003,
}

enum /*GR_PIPELINE_BIND_POINT*/  {
   GR_PIPELINE_BIND_POINT_COMPUTE  = 0x1e00,
   GR_PIPELINE_BIND_POINT_GRAPHICS = 0x1e01,
}

enum /*GR_PRIMITIVE_TOPOLOGY*/  {
   GR_TOPOLOGY_POINT_LIST          = 0x2000,
   GR_TOPOLOGY_LINE_LIST           = 0x2001,
   GR_TOPOLOGY_LINE_STRIP          = 0x2002,
   GR_TOPOLOGY_TRIANGLE_LIST       = 0x2003,
   GR_TOPOLOGY_TRIANGLE_STRIP      = 0x2004,
   GR_TOPOLOGY_RECT_LIST           = 0x2005,
   GR_TOPOLOGY_QUAD_LIST           = 0x2006,
   GR_TOPOLOGY_QUAD_STRIP          = 0x2007,
   GR_TOPOLOGY_LINE_LIST_ADJ       = 0x2008,
   GR_TOPOLOGY_LINE_STRIP_ADJ      = 0x2009,
   GR_TOPOLOGY_TRIANGLE_LIST_ADJ   = 0x200a,
   GR_TOPOLOGY_TRIANGLE_STRIP_ADJ  = 0x200b,
   GR_TOPOLOGY_PATCH               = 0x200c,
}

enum /*GR_QUERY_TYPE*/  {
    GR_QUERY_OCCLUSION              = 0x1a00,
    GR_QUERY_PIPELINE_STATISTICS    = 0x1a01,
}

enum /*GR_QUEUE_TYPE*/  {
   GR_QUEUE_UNIVERSAL = 0x1000,
   GR_QUEUE_COMPUTE   = 0x1001,
}

enum /*GR_STATE_BIND_POINT*/  {
   GR_STATE_BIND_VIEWPORT      = 0x1f00,
   GR_STATE_BIND_RASTER        = 0x1f01,
   GR_STATE_BIND_DEPTH_STENCIL = 0x1f02,
   GR_STATE_BIND_COLOR_BLEND   = 0x1f03,
   GR_STATE_BIND_MSAA          = 0x1f04,
}

enum /*GR_STENCIL_OP*/  {
   GR_STENCIL_OP_KEEP      = 0x2b00,
   GR_STENCIL_OP_ZERO      = 0x2b01,
   GR_STENCIL_OP_REPLACE   = 0x2b02,
   GR_STENCIL_OP_INC_CLAMP = 0x2b03,
   GR_STENCIL_OP_DEC_CLAMP = 0x2b04,
   GR_STENCIL_OP_INVERT    = 0x2b05,
   GR_STENCIL_OP_INC_WRAP  = 0x2b06,
   GR_STENCIL_OP_DEC_WRAP  = 0x2b07,
}

enum /*GR_SYSTEM_ALLOC_TYPE*/  {
   GR_SYSTEM_ALLOC_API_OBJECT      = 0x2e00,
   GR_SYSTEM_ALLOC_INTERNAL        = 0x2e01,
   GR_SYSTEM_ALLOC_INTERNAL_TEMP   = 0x2e02,
   GR_SYSTEM_ALLOC_INTERNAL_SHADER = 0x2e03,
   GR_SYSTEM_ALLOC_DEBUG           = 0x2e04,
}

enum /*GR_TEX_ADDRESS*/  {
   GR_TEX_ADDRESS_WRAP         = 0x2400,
   GR_TEX_ADDRESS_MIRROR       = 0x2401,
   GR_TEX_ADDRESS_CLAMP        = 0x2402,
   GR_TEX_ADDRESS_MIRROR_ONCE  = 0x2403,
   GR_TEX_ADDRESS_CLAMP_BORDER = 0x2404,
}

enum /*GR_TEX_FILTER*/  {
   GR_TEX_FILTER_MAG_POINT_MIN_POINT_MIP_POINT     = 0x2340,
   GR_TEX_FILTER_MAG_LINEAR_MIN_POINT_MIP_POINT    = 0x2341,
   GR_TEX_FILTER_MAG_POINT_MIN_LINEAR_MIP_POINT    = 0x2344,
   GR_TEX_FILTER_MAG_LINEAR_MIN_LINEAR_MIP_POINT   = 0x2345,
   GR_TEX_FILTER_MAG_POINT_MIN_POINT_MIP_LINEAR    = 0x2380,
   GR_TEX_FILTER_MAG_LINEAR_MIN_POINT_MIP_LINEAR   = 0x2381,
   GR_TEX_FILTER_MAG_POINT_MIN_LINEAR_MIP_LINEAR   = 0x2384,
   GR_TEX_FILTER_MAG_LINEAR_MIN_LINEAR_MIP_LINEAR  = 0x2385,
   GR_TEX_FILTER_ANISOTROPIC                       = 0x238f,
}

enum /*GR_TIMESTAMP_TYPE*/  {
   GR_TIMESTAMP_TOP        = 0x1b00,
   GR_TIMESTAMP_BOTTOM     = 0x1b01,
}

enum /*GR_VALIDATION_LEVEL*/  {
    GR_VALIDATION_LEVEL_0   = 0x8000,
    GR_VALIDATION_LEVEL_1   = 0x8001,
    GR_VALIDATION_LEVEL_2   = 0x8002,
    GR_VALIDATION_LEVEL_3   = 0x8003,
    GR_VALIDATION_LEVEL_4   = 0x8004,
}

/* ----- */
/* Flags */
/* ----- */

enum /*GR_CMD_BUFFER_BUILD_FLAGS*/  {
   GR_CMD_BUFFER_OPTIMIZE_GPU_SMALL_BATCH       = 0x00000001,
   GR_CMD_BUFFER_OPTIMIZE_PIPELINE_SWITCH       = 0x00000002,
   GR_CMD_BUFFER_OPTIMIZE_ONE_TIME_SUBMIT       = 0x00000004,
   GR_CMD_BUFFER_OPTIMIZE_DESCRIPTOR_SET_SWITCH = 0x00000008,
}

enum /*GR_DEPTH_STENCIL_VIEW_CREATE_FLAGS*/  {
    GR_DEPTH_STENCIL_VIEW_CREATE_READ_ONLY_DEPTH   = 0x00000001,
    GR_DEPTH_STENCIL_VIEW_CREATE_READ_ONLY_STENCIL = 0x00000002,
}

enum /*GR_DEVICE_CREATE_FLAGS*/  {
   GR_DEVICE_CREATE_VALIDATION = 0x00000001,
}

enum /*GR_FORMAT_FEATURE_FLAGS*/  {
   GR_FORMAT_IMAGE_SHADER_READ    = 0x00000001,
   GR_FORMAT_IMAGE_SHADER_WRITE   = 0x00000002,
   GR_FORMAT_IMAGE_COPY           = 0x00000004,
   GR_FORMAT_MEMORY_SHADER_ACCESS = 0x00000008,
   GR_FORMAT_COLOR_TARGET_WRITE   = 0x00000010,
   GR_FORMAT_COLOR_TARGET_BLEND   = 0x00000020,
   GR_FORMAT_DEPTH_TARGET         = 0x00000040,
   GR_FORMAT_STENCIL_TARGET       = 0x00000080,
   GR_FORMAT_MSAA_TARGET          = 0x00000100,
   GR_FORMAT_CONVERSION           = 0x00000200,
}

enum /*GR_GPU_COMPATIBILITY_FLAGS*/  {
   GR_GPU_COMPAT_ASIC_FEATURES       = 0x00000001,
   GR_GPU_COMPAT_IQ_MATCH            = 0x00000002,
   GR_GPU_COMPAT_PEER_WRITE_TRANSFER = 0x00000004,
   GR_GPU_COMPAT_SHARED_MEMORY       = 0x00000008,
   GR_GPU_COMPAT_SHARED_SYNC         = 0x00000010,
   GR_GPU_COMPAT_SHARED_GPU0_DISPLAY = 0x00000020,
   GR_GPU_COMPAT_SHARED_GPU1_DISPLAY = 0x00000040,
}

enum /*GR_IMAGE_CREATE_FLAGS*/  {
   GR_IMAGE_CREATE_INVARIANT_DATA     = 0x00000001,
   GR_IMAGE_CREATE_CLONEABLE          = 0x00000002,
   GR_IMAGE_CREATE_SHAREABLE          = 0x00000004,
   GR_IMAGE_CREATE_VIEW_FORMAT_CHANGE = 0x00000008,
}

enum /*GR_IMAGE_USAGE_FLAGS*/  {
   GR_IMAGE_USAGE_SHADER_ACCESS_READ  = 0x00000001,
   GR_IMAGE_USAGE_SHADER_ACCESS_WRITE = 0x00000002,
   GR_IMAGE_USAGE_COLOR_TARGET        = 0x00000004,
   GR_IMAGE_USAGE_DEPTH_STENCIL       = 0x00000008,
}

enum /*GR_MEMORY_ALLOC_FLAGS*/  {
   GR_MEMORY_ALLOC_VIRTUAL   = 0x00000001,
   GR_MEMORY_ALLOC_SHAREABLE = 0x00000002,
}

enum /*GR_MEMORY_HEAP_FLAGS*/ {
   GR_MEMORY_HEAP_CPU_VISIBLE        = 0x00000001,
   GR_MEMORY_HEAP_CPU_GPU_COHERENT   = 0x00000002,
   GR_MEMORY_HEAP_CPU_UNCACHED       = 0x00000004,
   GR_MEMORY_HEAP_CPU_WRITE_COMBINED = 0x00000008,
   GR_MEMORY_HEAP_HOLDS_PINNED       = 0x00000010,
   GR_MEMORY_HEAP_SHAREABLE          = 0x00000020,
}

enum /*GR_MEMORY_PROPERTY_FLAGS*/  {
   GR_MEMORY_MIGRATION_SUPPORT         = 0x00000001,
   GR_MEMORY_VIRTUAL_REMAPPING_SUPPORT = 0x00000002,
   GR_MEMORY_PINNING_SUPPORT           = 0x00000004,
   GR_MEMORY_PREFER_GLOBAL_REFS        = 0x00000008,
}

enum /*GR_MEMORY_REF_FLAGS*/  {
   GR_MEMORY_REF_READ_ONLY = 0x00000001,
}

enum /*GR_PIPELINE_CREATE_FLAGS*/  {
   GR_PIPELINE_CREATE_DISABLE_OPTIMIZATION = 0x00000001,
}

enum /*GR_QUERY_CONTROL_FLAGS*/  {
   GR_QUERY_IMPRECISE_DATA = 0x00000001,
}

enum /*GR_SEMAPHORE_CREATE_FLAGS*/  {
   GR_SEMAPHORE_CREATE_SHAREABLE = 0x00000001,
} 

enum /*GR_SHADER_CREATE_FLAGS*/  {
   GR_SHADER_CREATE_ALLOW_RE_Z = 0x00000001,
}

/* Debug and Validation Enumerations */
enum /*GR_DBG_DATA_TYPE*/  {
    GR_DBG_DATA_OBJECT_TYPE          = 0x00020a00,
    GR_DBG_DATA_OBJECT_CREATE_INFO   = 0x00020a01,
    GR_DBG_DATA_OBJECT_TAG           = 0x00020a02,
    GR_DBG_DATA_CMD_BUFFER_API_TRACE = 0x00020b00,
    GR_DBG_DATA_MEMORY_OBJECT_LAYOUT = 0x00020c00,
    GR_DBG_DATA_MEMORY_OBJECT_STATE  = 0x00020c01,
    GR_DBG_DATA_SEMAPHORE_IS_BLOCKED = 0x00020d00,
}

enum /*GR_DBG_DEVICE_OPTION*/  {
    GR_DBG_OPTION_DISABLE_PIPELINE_LOADS         = 0x00020400,
    GR_DBG_OPTION_FORCE_OBJECT_MEMORY_REQS       = 0x00020401,
    GR_DBG_OPTION_FORCE_LARGE_IMAGE_ALIGNMENT    = 0x00020402,
    GR_DBG_OPTION_SKIP_EXECUTION_ON_ERROR        = 0x00020403,
}

enum /*GR_DBG_GLOBAL_OPTION*/  {
    GR_DBG_OPTION_DEBUG_ECHO_ENABLE = 0x00020100,
    GR_DBG_OPTION_BREAK_ON_ERROR    = 0x00020101,
    GR_DBG_OPTION_BREAK_ON_WARNING  = 0x00020102,
}

enum /*GR_DBG_MSG_FILTER*/  {
    GR_DBG_MSG_FILTER_NONE     = 0x00020800,
    GR_DBG_MSG_FILTER_REPEATED = 0x00020801,
    GR_DBG_MSG_FILTER_ALL      = 0x00020802,
}

enum /*GR_DBG_MSG_TYPE*/  {
    GR_DBG_MSG_UNKNOWN      = 0x00020000,
    GR_DBG_MSG_ERROR        = 0x00020001,
    GR_DBG_MSG_WARNING      = 0x00020002,
    GR_DBG_MSG_PERF_WARNING = 0x00020003,
}

enum /*GR_DBG_OBJECT_TYPE*/  {
    GR_DBG_OBJECT_UNKNOWN                = 0x00020900,
    GR_DBG_OBJECT_DEVICE                 = 0x00020901,
    GR_DBG_OBJECT_QUEUE                  = 0x00020902,
    GR_DBG_OBJECT_GPU_MEMORY             = 0x00020903,
    GR_DBG_OBJECT_IMAGE                  = 0x00020904,
    GR_DBG_OBJECT_IMAGE_VIEW             = 0x00020905,
    GR_DBG_OBJECT_COLOR_TARGET_VIEW      = 0x00020906,
    GR_DBG_OBJECT_DEPTH_STENCIL_VIEW     = 0x00020907,
    GR_DBG_OBJECT_SHADER                 = 0x00020908,
    GR_DBG_OBJECT_GRAPHICS_PIPELINE      = 0x00020909,
    GR_DBG_OBJECT_COMPUTE_PIPELINE       = 0x0002090a,
    GR_DBG_OBJECT_SAMPLER                = 0x0002090b,
    GR_DBG_OBJECT_DESCRIPTOR_SET         = 0x0002090c,
    GR_DBG_OBJECT_VIEWPORT_STATE         = 0x0002090d,
    GR_DBG_OBJECT_RASTER_STATE           = 0x0002090e,
    GR_DBG_OBJECT_MSAA_STATE             = 0x0002090f,
    GR_DBG_OBJECT_COLOR_BLEND_STATE      = 0x00020910,
    GR_DBG_OBJECT_DEPTH_STENCIL_STATE    = 0x00020911,
    GR_DBG_OBJECT_CMD_BUFFER             = 0x00020912,
    GR_DBG_OBJECT_FENCE                  = 0x00020913,
    GR_DBG_OBJECT_QUEUE_SEMAPHORE        = 0x00020914,
    GR_DBG_OBJECT_EVENT                  = 0x00020915,
    GR_DBG_OBJECT_QUERY_POOL             = 0x00020916,
    GR_DBG_OBJECT_SHARED_GPU_MEMORY      = 0x00020917,
    GR_DBG_OBJECT_SHARED_QUEUE_SEMAPHORE = 0x00020918,
    GR_DBG_OBJECT_PEER_GPU_MEMORY        = 0x00020919,
    GR_DBG_OBJECT_PEER_IMAGE             = 0x0002091a,
    GR_DBG_OBJECT_PINNED_GPU_MEMORY      = 0x0002091b,
    GR_DBG_OBJECT_INTERNAL_GPU_MEMORY    = 0x0002091c,
}

/* --------------- */
/* Data Structures */
/* --------------- */

struct GR_ALLOC_CALLBACKS  {
   GR_ALLOC_FUNCTION pfnAlloc;
   GR_FREE_FUNCTION  pfnFree;
}

struct GR_APPLICATION_INFO  {
   const GR_CHAR * pAppName;
   GR_UINT32       appVersion;
   const GR_CHAR * pEngineName;
   GR_UINT32       engineVersion;
   GR_UINT32       apiVersion;
}

struct GR_CHANNEL_MAPPING  {
   GR_ENUM r;
   GR_ENUM g;
   GR_ENUM b;
   GR_ENUM a;
}

struct GR_CMD_BUFFER_CREATE_INFO  {
   GR_ENUM queueType;
   GR_FLAGS flags;
}

struct GR_COLOR_BLEND_STATE_CREATE_INFO  {
   GR_COLOR_TARGET_BLEND_STATE[GR_MAX_COLOR_TARGETS] target;
   GR_FLOAT[4] blendConst;
}

struct GR_COLOR_TARGET_BIND_INFO  {
   GR_COLOR_TARGET_VIEW view;
   GR_ENUM colorTargetState;
}

struct GR_COLOR_TARGET_BLEND_STATE  {
   GR_BOOL blendEnable;
   GR_ENUM srcBlendColor;
   GR_ENUM destBlendColor;
   GR_ENUM blendFuncColor;
   GR_ENUM srcBlendAlpha;
   GR_ENUM destBlendAlpha;
   GR_ENUM blendFuncAlpha;
}

struct GR_COLOR_TARGET_VIEW_CREATE_INFO  {
   GR_IMAGE  image;
   GR_FORMAT format;
   GR_UINT   mipLevel;
   GR_UINT   baseArraySlice;
   GR_UINT   arraySize;
}

struct GR_COMPUTE_PIPELINE_CREATE_INFO  {
   GR_PIPELINE_SHADER cs;
   GR_FLAGS flags;
}

struct GR_DEPTH_STENCIL_BIND_INFO  {
   GR_DEPTH_STENCIL_VIEW view;
   GR_ENUM depthState;
   GR_ENUM stencilState;
}

struct GR_DEPTH_STENCIL_OP  {
   GR_ENUM stencilFailOp;
   GR_ENUM stencilPassOp;
   GR_ENUM stencilDepthFailOp;
   GR_ENUM stencilFunc;
   GR_UINT8 stencilRef;
}

struct GR_DEPTH_STENCIL_STATE_CREATE_INFO  {
   GR_BOOL  depthEnable;
   GR_BOOL  depthWriteEnable;
   GR_ENUM  depthFunc;
   GR_BOOL  depthBoundsEnable;
   GR_FLOAT minDepth;
   GR_FLOAT maxDepth;
   GR_BOOL  stencilEnable;
   GR_UINT8 stencilReadMask;
   GR_UINT8 stencilWriteMask;
   GR_DEPTH_STENCIL_OP front;
   GR_DEPTH_STENCIL_OP back;
}

struct GR_DEPTH_STENCIL_VIEW_CREATE_INFO  {
   GR_IMAGE image;
   GR_UINT  mipLevel;
   GR_UINT  baseArraySlice;
   GR_UINT  arraySize;
   GR_FLAGS flags;
}

struct GR_DESCRIPTOR_SET_ATTACH_INFO  {
   GR_DESCRIPTOR_SET descriptorSet;
   GR_UINT slotOffset;
}

struct GR_DESCRIPTOR_SET_CREATE_INFO  {
   GR_UINT slots;
}

struct GR_DESCRIPTOR_SET_MAPPING  {
   GR_UINT descriptorCount;
   const( GR_DESCRIPTOR_SLOT_INFO ) * pDescriptorInfo;
}

struct GR_DESCRIPTOR_SLOT_INFO  {
   GR_ENUM slotObjectType;
   union  {
      GR_UINT shaderEntityIndex;
      const( GR_DESCRIPTOR_SET_MAPPING ) * pNextLevelSet;
   }
}

struct GR_DEVICE_CREATE_INFO  {
   GR_UINT  queueRecordCount;
   const( GR_DEVICE_QUEUE_CREATE_INFO ) * pRequestedQueues;
   GR_UINT              extensionCount;
   const( GR_CHAR * ) * ppEnabledExtensionNames;
   GR_ENUM              maxValidationLevel;
   GR_FLAGS             flags;
}

struct GR_DEVICE_QUEUE_CREATE_INFO  {
   GR_ENUM queueType;
   GR_UINT queueCount;
}

struct GR_DISPATCH_INDIRECT_ARG  {
   GR_UINT32 x;
   GR_UINT32 y;
   GR_UINT32 z;
}

struct GR_DRAW_INDEXED_INDIRECT_ARG  {
   GR_UINT32 indexCount;
   GR_UINT32 instanceCount;
   GR_UINT32 firstIndex;
   GR_INT32  vertexOffset;
   GR_UINT32 firstInstance;
}

struct GR_DRAW_INDIRECT_ARG  {
   GR_UINT32 vertexCount;
   GR_UINT32 instanceCount;
   GR_UINT32 firstVertex;
   GR_UINT32 firstInstance;
}

struct GR_DYNAMIC_MEMORY_VIEW_SLOT_INFO  {
   GR_ENUM slotObjectType;
   GR_UINT shaderEntityIndex;
}

struct GR_EVENT_CREATE_INFO  {
    GR_FLAGS flags;
}

struct GR_EXTENT2D  {
   GR_INT width;
   GR_INT height;
}

struct GR_EXTENT3D  {
   GR_INT width;
   GR_INT height;
   GR_INT depth;
}

struct GR_FENCE_CREATE_INFO  {
   GR_FLAGS flags;
}

struct GR_FORMAT  {
   //GR_UINT32 channelFormat : 16;
   //GR_UINT32 numericFormat : 16;
   ushort channelFormat;
   ushort numericFormat;
}

struct GR_FORMAT_PROPERTIES  {
    GR_FLAGS linearTilingFeatures;
    GR_FLAGS optimalTilingFeatures;
}

struct GR_GPU_COMPATIBILITY_INFO  {
    GR_FLAGS compatibilityFlags;
}

struct GR_GRAPHICS_PIPELINE_CREATE_INFO  {
   GR_PIPELINE_SHADER     vs;
   GR_PIPELINE_SHADER     hs;
   GR_PIPELINE_SHADER     ds;
   GR_PIPELINE_SHADER     gs;
   GR_PIPELINE_SHADER     ps;
   GR_PIPELINE_IA_STATE   iaState;
   GR_PIPELINE_TESS_STATE tessState;
   GR_PIPELINE_RS_STATE   rsState;
   GR_PIPELINE_CB_STATE   cbState;
   GR_PIPELINE_DB_STATE   dbState;
   GR_FLAGS               flags;
}

struct GR_IMAGE_COPY  {
   GR_IMAGE_SUBRESOURCE srcSubresource;
   GR_OFFSET3D          srcOffset;
   GR_IMAGE_SUBRESOURCE destSubresource;
   GR_OFFSET3D          destOffset;
   GR_EXTENT3D          extent;
}

struct GR_IMAGE_CREATE_INFO  {
   GR_ENUM     imageType;
   GR_FORMAT   format;
   GR_EXTENT3D extent;
   GR_UINT     mipLevels;
   GR_UINT     arraySize;
   GR_UINT     samples;
   GR_ENUM     tiling;
   GR_FLAGS    usage;
   GR_FLAGS    flags;
}

struct GR_IMAGE_RESOLVE  {
    GR_IMAGE_SUBRESOURCE srcSubresource;
    GR_OFFSET2D          srcOffset;
    GR_IMAGE_SUBRESOURCE destSubresource;
    GR_OFFSET2D          destOffset;
    GR_EXTENT2D          extent;
}

struct GR_IMAGE_STATE_TRANSITION  {
   GR_IMAGE image;
   GR_ENUM  oldState;
   GR_ENUM  newState;
   GR_IMAGE_SUBRESOURCE_RANGE subresourceRange;
}

struct GR_IMAGE_SUBRESOURCE  {
   GR_ENUM aspect;
   GR_UINT mipLevel;
   GR_UINT arraySlice;
}

struct GR_IMAGE_SUBRESOURCE_RANGE  {
   GR_ENUM aspect;
   GR_UINT baseMipLevel;
   GR_UINT mipLevels;
   GR_UINT baseArraySlice;
   GR_UINT arraySize;
}

struct GR_IMAGE_VIEW_ATTACH_INFO  {
   GR_IMAGE_VIEW view;
   GR_ENUM       state;
}

struct GR_IMAGE_VIEW_CREATE_INFO  {
   GR_IMAGE                   image;
   GR_ENUM                    viewType;
   GR_FORMAT                  format;
   GR_CHANNEL_MAPPING         channels;
   GR_IMAGE_SUBRESOURCE_RANGE subresourceRange;
   GR_FLOAT                   minLod;
}

struct GR_LINK_CONST_BUFFER  {
   GR_UINT bufferId;
   GR_SIZE bufferSize;
   const( GR_VOID ) * pBufferData;
}

struct GR_MEMORY_ALLOC_INFO  {
   GR_GPU_SIZE                  size;
   GR_GPU_SIZE                  alignment;
   GR_FLAGS                     flags;
   GR_UINT                      heapCount;
   GR_UINT[GR_MAX_MEMORY_HEAPS] heaps;
   GR_ENUM                      memPriority;
}

struct GR_MEMORY_COPY  {
   GR_GPU_SIZE srcOffset;
   GR_GPU_SIZE destOffset;
   GR_GPU_SIZE copySize;
}

struct GR_MEMORY_HEAP_PROPERTIES  {
   GR_ENUM     heapMemoryType;
   GR_GPU_SIZE heapSize;
   GR_GPU_SIZE pageSize;
   GR_FLAGS    flags;
   GR_FLOAT    gpuReadPerfRating;
   GR_FLOAT    gpuWritePerfRating;
   GR_FLOAT    cpuReadPerfRating;
   GR_FLOAT    cpuWritePerfRating;
}

struct GR_MEMORY_IMAGE_COPY  {
   GR_GPU_SIZE          memOffset;
   GR_IMAGE_SUBRESOURCE imageSubresource;
   GR_OFFSET3D          imageOffset;
   GR_EXTENT3D          imageExtent;
}

struct GR_MEMORY_OPEN_INFO  {
    GR_GPU_MEMORY sharedMem;
}

struct GR_MEMORY_REF  {
   GR_GPU_MEMORY mem;
   GR_FLAGS      flags;
}

struct GR_MEMORY_REQUIREMENTS  {
   GR_GPU_SIZE size;
   GR_GPU_SIZE alignment;
   GR_UINT     heapCount;
   GR_UINT[GR_MAX_MEMORY_HEAPS] heaps;
}

struct GR_MEMORY_STATE_TRANSITION  {
   GR_GPU_MEMORY mem;
   GR_ENUM       oldState;
   GR_ENUM       newState;
   GR_GPU_SIZE   offset;
   GR_GPU_SIZE   regionSize;
}

struct GR_MEMORY_VIEW_ATTACH_INFO  {
   GR_GPU_MEMORY mem;
   GR_GPU_SIZE   offset;
   GR_GPU_SIZE   range;
   GR_GPU_SIZE   stride;
   GR_FORMAT     format;
   GR_ENUM       state;
}

struct GR_MSAA_STATE_CREATE_INFO  {
   GR_UINT        samples;
   GR_SAMPLE_MASK sampleMask;
}

struct GR_OFFSET2D  {
   GR_INT x;
   GR_INT y;
}

struct GR_OFFSET3D  {
   GR_INT x;
   GR_INT y;
   GR_INT z;
}

struct GR_PARENT_DEVICE  {
   GR_DEVICE device;
}

struct GR_PARENT_PHYSICAL_GPU  {
   GR_PHYSICAL_GPU gpu;
}

struct GR_PEER_IMAGE_OPEN_INFO  {
   GR_IMAGE originalImage;
}

struct GR_PEER_MEMORY_OPEN_INFO  {
   GR_GPU_MEMORY originalMem;
}

struct GR_PHYSICAL_GPU_IMAGE_PROPERTIES  {
   GR_UINT     maxSliceWidth;
   GR_UINT     maxSliceHeight;
   GR_UINT     maxDepth;
   GR_UINT     maxArraySlices;
   GR_UINT     reserved1;
   GR_UINT     reserved2;
   GR_GPU_SIZE maxMemoryAlignment;
   GR_UINT32   sparseImageSupportLevel;
   GR_FLAGS    flags;
}

struct GR_PHYSICAL_GPU_MEMORY_PROPERTIES  {
   GR_FLAGS    flags;
   GR_GPU_SIZE virtualMemPageSize;
   GR_GPU_SIZE maxVirtualMemSize;
   GR_GPU_SIZE maxPhysicalMemSize;
}

struct GR_PHYSICAL_GPU_PERFORMANCE  {
   GR_FLOAT maxGpuClock;
   GR_FLOAT aluPerClock;
   GR_FLOAT texPerClock;
   GR_FLOAT primsPerClock;
   GR_FLOAT pixelsPerClock;
}

struct GR_PHYSICAL_GPU_PROPERTIES  {
   GR_UINT32   apiVersion;
   GR_UINT32   driverVersion;
   GR_UINT32   vendorId;
   GR_UINT32   deviceId;
   GR_ENUM     gpuType;
   GR_CHAR[ GR_MAX_PHYSICAL_GPU_NAME ] gpuName;
   GR_UINT     maxMemRefsPerSubmission;
   GR_GPU_SIZE reserved;
   GR_GPU_SIZE maxInlineMemoryUpdateSize;
   GR_UINT     maxBoundDescriptorSets;
   GR_UINT     maxThreadGroupSize;
   GR_UINT64   timestampFrequency;
   GR_BOOL     multiColorTargetClears;
}

struct GR_PHYSICAL_GPU_QUEUE_PROPERTIES  {
   GR_ENUM queueType;
   GR_UINT queueCount;
   GR_UINT maxAtomicCounters;
   GR_BOOL supportsTimestamps;
}

struct GR_PIPELINE_CB_STATE  {
   GR_BOOL alphaToCoverageEnable;
   GR_BOOL dualSourceBlendEnable;
   GR_ENUM logicOp;
   GR_PIPELINE_CB_TARGET_STATE[GR_MAX_COLOR_TARGETS] target;
}

struct GR_PIPELINE_CB_TARGET_STATE  {
   GR_BOOL   blendEnable;
   GR_FORMAT format;
   GR_UINT8  channelWriteMask;
}

struct GR_PIPELINE_DB_STATE  {
   GR_FORMAT format;
}

struct GR_PIPELINE_IA_STATE  {
   GR_ENUM topology;
   GR_BOOL disableVertexReuse;
}

struct GR_PIPELINE_RS_STATE  {
   GR_BOOL depthClipEnable;
}

struct GR_PIPELINE_SHADER  {
   GR_SHADER shader;
   GR_DESCRIPTOR_SET_MAPPING[GR_MAX_DESCRIPTOR_SETS] descriptorSetMapping;
   GR_UINT linkConstBufferCount;
   const( GR_LINK_CONST_BUFFER ) * pLinkConstBufferInfo;
   GR_DYNAMIC_MEMORY_VIEW_SLOT_INFO dynamicMemoryViewMapping;
}

struct GR_PIPELINE_STATISTICS_DATA  {
   GR_UINT64 psInvocations;
   GR_UINT64 cPrimitives;
   GR_UINT64 cInvocations;
   GR_UINT64 vsInvocations;
   GR_UINT64 gsInvocations;
   GR_UINT64 gsPrimitives;
   GR_UINT64 iaPrimitives;
   GR_UINT64 iaVertices;
   GR_UINT64 hsInvocations;
   GR_UINT64 dsInvocations;
   GR_UINT64 csInvocations;
}

struct GR_PIPELINE_TESS_STATE  {
   GR_UINT  patchControlPoints;
   GR_FLOAT optimalTessFactor;
}

struct GR_QUERY_POOL_CREATE_INFO  {
    GR_ENUM queryType;
    GR_UINT slots;
}

struct GR_QUEUE_SEMAPHORE_CREATE_INFO  {
    GR_UINT  initialCount;
    GR_FLAGS flags;
}

struct GR_QUEUE_SEMAPHORE_OPEN_INFO  {
    GR_QUEUE_SEMAPHORE sharedSemaphore;
}

struct GR_RASTER_STATE_CREATE_INFO  {
   GR_ENUM  fillMode;
   GR_ENUM  cullMode;
   GR_ENUM  frontFace;
   GR_INT   depthBias;
   GR_FLOAT depthBiasClamp;
   GR_FLOAT slopeScaledDepthBias;
}

struct GR_RECT  {
   GR_OFFSET2D offset;
   GR_EXTENT2D extent;
}

struct GR_SAMPLER_CREATE_INFO  {
   GR_ENUM  filter;
   GR_ENUM  addressU;
   GR_ENUM  addressV;
   GR_ENUM  addressW;
   GR_FLOAT mipLodBias;
   GR_UINT  maxAnisotropy;
   GR_ENUM  compareFunc;
   GR_FLOAT minLod;
   GR_FLOAT maxLod;
   GR_ENUM  borderColor;
}

struct GR_SHADER_CREATE_INFO  {
   GR_SIZE            codeSize;
   const( GR_VOID ) * pCode;
   GR_FLAGS           flags;
}

struct GR_SUBRESOURCE_LAYOUT  {
    GR_GPU_SIZE offset;
    GR_GPU_SIZE size;
    GR_GPU_SIZE rowPitch;
    GR_GPU_SIZE depthPitch;
}

struct GR_VIEWPORT  {
   GR_FLOAT originX;
   GR_FLOAT originY;
   GR_FLOAT width;
   GR_FLOAT height;
   GR_FLOAT minDepth;
   GR_FLOAT maxDepth;
}

struct GR_VIEWPORT_STATE_CREATE_INFO  {
   GR_UINT viewportCount;
   GR_BOOL scissorEnable;
   GR_VIEWPORT[GR_MAX_VIEWPORTS] viewports;
   GR_RECT[GR_MAX_VIEWPORTS]     scissors;
}

struct GR_VIRTUAL_MEMORY_REMAP_RANGE  {
    GR_GPU_MEMORY virtualMem;
    GR_GPU_SIZE   virtualStartPage;
    GR_GPU_MEMORY realMem;
    GR_GPU_SIZE   realStartPage;
    GR_GPU_SIZE   pageCount;
}

/* --------- */
/* Callbacks */
/* --------- */

extern( Windows ) nothrow  {

   alias GR_VOID * function(
      GR_SIZE size,
      GR_SIZE alignment,
      GR_ENUM allocType
   )  GR_ALLOC_FUNCTION;

   alias GR_VOID function(
      GR_VOID * pMem
   )  GR_FREE_FUNCTION;

   /* Debug and Validation API */
   alias GR_VOID function(
      GR_ENUM msgType,
      GR_ENUM validationLevel,
      GR_BASE_OBJECT srcObject,
      GR_SIZE location,
      GR_ENUM msgCode,
      const( GR_CHAR ) * pMsg,
      GR_VOID * pUserData
   )  GR_DBG_MSG_CALLBACK_FUNCTION;
}

/* ----------------------- */
/* Errors and Return Codes */
/* ----------------------- */

enum /*GR_RESULT*/  {
   GR_SUCCESS = 0x10000,
   GR_UNSUPPORTED,
   GR_NOT_READY,
   GR_TIMEOUT,
   GR_EVENT_SET,
   GR_EVENT_RESET,

   GR_ERROR_UNKNOW = 0x11000,
   GR_ERROR_UNAVAILABLE,
   GR_ERROR_INITIALIZATION_FAILED,
   GR_ERROR_OUT_OF_MEMORY,
   GR_ERROR_OUT_OF_GPU_MEMORY,
   GR_ERROR_DEVICE_ALREADY_CREATED,
   GR_ERROR_DEVICE_LOST,
   GR_ERROR_INVALID_POINTER,
   GR_ERROR_INVALID_VALUE,
   GR_ERROR_INVALID_HANDLE,
   GR_ERROR_INVALID_ORDINAL,
   GR_ERROR_INVALID_MEMORY_SIZE,
   GR_ERROR_INVALID_EXTENSION,
   GR_ERROR_INVALID_FLAGS,
   GR_ERROR_INVALID_ALIGNMENT,
   GR_ERROR_INVALID_FORMAT,
   GR_ERROR_INVALID_IMAGE,
   GR_ERROR_INVALID_DESCRIPTOR_SET_DATA,
   GR_ERROR_INVALID_QUEUE_TYPE,
   GR_ERROR_INVALID_OBJECT_TYPE,
   GR_ERROR_UNSUPPORTED_SHADER_IL_VERSION,
   GR_ERROR_BAD_SHADER_CODE,
   GR_ERROR_BAD_PIPELINE_DATA,
   GR_ERROR_TOO_MANY_MEMORY_REFERENCES,
   GR_ERROR_NOT_MAPPABLE,
   GR_ERROR_MEMORY_MAP_FAILED,
   GR_ERROR_MEMORY_UNMAP_FAILED,
   GR_ERROR_INCOMPATIBLE_DEVICE,
   GR_ERROR_INCOMPATIBLE_DRIVER,
   GR_ERROR_INCOMPLETE_COMMAND_BUFFER,
   GR_ERROR_BUILDING_COMMAND_BUFFER,
   GR_ERROR_MEMORY_NOT_BOUND,
   GR_ERROR_INCOMPATIBLE_QUEUE,
   GR_ERROR_NOT_SHAREABLE
}

/* --------- */
/* Functions */
/* --------- */

extern( Windows ) @nogc nothrow  {

   /* Initialization and Device Functions */
   alias da_grInitAndEnumerateGpus = GR_RESULT function(
      const( GR_APPLICATION_INFO ) * pAppInfo,
      const( GR_ALLOC_CALLBACKS  ) * pAllocCb,
      GR_UINT * pGpuCount,
      GR_PHYSICAL_GPU * gpus ); // gpus[GR_MAX_PHYSICAL_GPUS]

   alias da_grGetGpuInfo = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateDevice = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      const( GR_DEVICE_CREATE_INFO ) * pCreateInfo,
      GR_DEVICE * pDevice );

   alias da_grDestroyDevice = GR_RESULT function(
      GR_DEVICE device );

   /* Extension Discovery Functions */
   alias da_grGetExtensionSupport = GR_RESULT function(
      GR_PHYSICAL_GPU gpu,
      const( GR_CHAR ) * pExtName );

   /* Queue Functions */
   alias da_grGetDeviceQueue = GR_RESULT function(
      GR_DEVICE  device,
      GR_ENUM    queueType,
      GR_UINT    queueId,
      GR_QUEUE * pQueue );

   alias da_grQueueWaitIdle = GR_RESULT function(
      GR_QUEUE queue );

   alias da_grDeviceWaitIdle = GR_RESULT function(
      GR_DEVICE device );

   alias da_grQueueSubmit = GR_RESULT function(
      GR_QUEUE  queue,
      GR_UINT   cmdBufferCount,
      const( GR_CMD_BUFFER ) * pCmdBuffers,
      GR_UINT   memRefCount,
      const( GR_MEMORY_REF ) * pMemRefs,
      GR_FENCE  fence );

   alias da_grQueueSetGlobalMemReferences = GR_RESULT function(
      GR_QUEUE queue,
      GR_UINT  memRefCount,
      const GR_MEMORY_REF * pMemRefs );

   /* Memory Management Functions */
   alias da_grGetMemoryHeapCount = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT * pCount );

   alias da_grGetMemoryHeapInfo = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   heapId,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grAllocMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MEMORY_ALLOC_INFO ) * pAllocInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grFreeMemory = GR_RESULT function(
      GR_GPU_MEMORY mem );

   alias da_grSetMemoryPriority = GR_RESULT function(
      GR_GPU_MEMORY mem,
      GR_ENUM       priority );

   alias da_grMapMemory = GR_RESULT function(
      GR_GPU_MEMORY mem,
      GR_FLAGS   flags,
      GR_VOID ** ppData );

   alias da_grUnmapMemory = GR_RESULT function(
      GR_GPU_MEMORY mem );

   alias da_grRemapVirtualMemoryPages = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   rangeCount,
      const( GR_VIRTUAL_MEMORY_REMAP_RANGE ) * pRanges,
      GR_UINT   preWaitSemaphoreCount,
      const( GR_QUEUE_SEMAPHORE ) * pPreWaitSemaphores,
      GR_UINT   postSignalSemaphoreCount,
      const( GR_QUEUE_SEMAPHORE ) * pPostSignalSemaphores );

   alias da_grPinSystemMemory = GR_RESULT function(
      GR_DEVICE       device,
      const GR_VOID * pSysMem,
      GR_SIZE         memSize,
      GR_GPU_MEMORY * pMem );

   /* Generic API Object Management Functions */
   alias da_grDestroyObject = GR_RESULT function(
      GR_OBJECT object );

   alias da_grGetObjectInfo = GR_RESULT function(
      GR_BASE_OBJECT object,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grBindObjectMemory = GR_RESULT function(
      GR_OBJECT     object,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   /* Image and Sampler Functions */
   alias da_grGetFormatInfo = GR_RESULT function(
      GR_DEVICE device,
      GR_FORMAT format,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateImage = GR_RESULT function(
      GR_DEVICE  device,
      const( GR_IMAGE_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE * pImage );
   
   alias da_grGetImageSubresourceInfo = GR_RESULT function(
      GR_IMAGE  image,
      const( GR_IMAGE_SUBRESOURCE ) * pSubresource,
      GR_ENUM   infoType,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateSampler = GR_RESULT function(
      GR_DEVICE device,
      const( GR_SAMPLER_CREATE_INFO ) * pCreateInfo,
      GR_SAMPLER * pSampler );

   /* Image View Functions */
   alias da_grCreateImageView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_IMAGE_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE_VIEW * pView );

   alias da_grCreateColorTargetView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COLOR_TARGET_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_COLOR_TARGET_VIEW * pView );

   alias da_grCreateDepthStencilView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DEPTH_STENCIL_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_DEPTH_STENCIL_VIEW * pView );

   /* Shader and Pipeline Functions */
   alias da_grCreateShader = GR_RESULT function(
      GR_DEVICE device,
      const( GR_SHADER_CREATE_INFO ) * pCreateInfo,
      GR_SHADER * pShader );

   alias da_grCreateGraphicsPipeline = GR_RESULT function(
      GR_DEVICE device,
      const( GR_GRAPHICS_PIPELINE_CREATE_INFO ) * pCreateInfo,
      GR_PIPELINE * pPipeline );

   alias da_grCreateComputePipeline = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COMPUTE_PIPELINE_CREATE_INFO ) * pCreateInfo,
      GR_PIPELINE * pPipeline );

   alias da_grStorePipeline = GR_RESULT function(
      GR_PIPELINE pipeline,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grLoadPipeline = GR_RESULT function(
      GR_DEVICE device,
      GR_SIZE   dataSize,
      const GR_VOID * pData,
      GR_PIPELINE * pPipeline );

   /* Descriptor Set Functions */
   alias da_grCreateDescriptorSet = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DESCRIPTOR_SET_CREATE_INFO ) * pCreateInfo,
      GR_DESCRIPTOR_SET * pDescriptorSet );

   alias da_grBeginDescriptorSetUpdate = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet );

   alias da_grEndDescriptorSetUpdate = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet );

   alias da_grAttachSamplerDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_SAMPLER ) * pSamplers );

   alias da_grAttachImageViewDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_IMAGE_VIEW_ATTACH_INFO ) * pImageViews );

   alias da_grAttachMemoryViewDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_MEMORY_VIEW_ATTACH_INFO ) * pMemViews );

   alias da_grAttachNestedDescriptors = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount,
      const( GR_DESCRIPTOR_SET_ATTACH_INFO ) * pNestedDescriptorSets );

   alias da_grClearDescriptorSetSlots = GR_VOID function(
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT startSlot,
      GR_UINT slotCount );

   /* State Object Functions */
   alias da_grCreateViewportState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_VIEWPORT_STATE_CREATE_INFO ) * pCreateInfo,
      GR_VIEWPORT_STATE_OBJECT * pState );

   alias da_grCreateRasterState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_RASTER_STATE_CREATE_INFO ) * pCreateInfo,
      GR_RASTER_STATE_OBJECT * pState );

   alias da_grCreateColorBlendState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_COLOR_BLEND_STATE_CREATE_INFO ) * pCreateInfo,
      GR_COLOR_BLEND_STATE_OBJECT * pState );

   alias da_grCreateDepthStencilState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_DEPTH_STENCIL_STATE_CREATE_INFO ) * pCreateInfo,
      GR_DEPTH_STENCIL_STATE_OBJECT * pState );

   alias da_grCreateMsaaState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MSAA_STATE_CREATE_INFO ) * pCreateInfo,
      GR_MSAA_STATE_OBJECT * pState );

   /* Query and Synchronization Functions */
   alias da_grCreateQueryPool = GR_RESULT function(
      GR_DEVICE device,
      const GR_QUERY_POOL_CREATE_INFO * pCreateInfo,
      GR_QUERY_POOL * pQueryPool );

   alias da_grGetQueryPoolResults = GR_RESULT function(
      GR_QUERY_POOL queryPool,
      GR_UINT   startQuery,
      GR_UINT   queryCount,
      GR_SIZE * pDataSize,
      GR_VOID * pData );

   alias da_grCreateFence = GR_RESULT function(
      GR_DEVICE device,
      const( GR_FENCE_CREATE_INFO ) * pCreateInfo,
      GR_FENCE * pFence );

   alias da_grGetFenceStatus = GR_RESULT function(
      GR_FENCE fence );

   alias da_grWaitForFences = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT   fenceCount,
      const( GR_FENCE ) * pFences,
      GR_BOOL   waitAll,
      GR_FLOAT  timeout );

   alias da_grCreateQueueSemaphore = GR_RESULT function(
      GR_DEVICE device,
      const GR_QUEUE_SEMAPHORE_CREATE_INFO * pCreateInfo,
      GR_QUEUE_SEMAPHORE * pSemaphore );

   alias da_grSignalQueueSemaphore = GR_RESULT function(
      GR_QUEUE queue,
      GR_QUEUE_SEMAPHORE semaphore );

   alias da_grWaitQueueSemaphore = GR_RESULT function(
      GR_QUEUE queue,
      GR_QUEUE_SEMAPHORE semaphore );

   alias da_grCreateEvent = GR_RESULT function(
      GR_DEVICE  device,
      const GR_EVENT_CREATE_INFO * pCreateInfo,
      GR_EVENT * pEvent );

   alias da_grGetEventStatus = GR_RESULT function(
      GR_EVENT event );

   alias da_grSetEvent = GR_RESULT function(
      GR_EVENT event );

   alias da_grResetEvent = GR_RESULT function(
      GR_EVENT event );

   /* Multi-device Management Functions */
   alias da_grGetMultiGpuCompatibility = GR_RESULT function(
      GR_PHYSICAL_GPU gpu0,
      GR_PHYSICAL_GPU gpu1,
      GR_GPU_COMPATIBILITY_INFO * pInfo );

   alias da_grOpenSharedMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_MEMORY_OPEN_INFO ) * pOpenInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grOpenSharedQueueSemaphore = GR_RESULT function(
      GR_DEVICE device,
      const( GR_QUEUE_SEMAPHORE_OPEN_INFO ) * pOpenInfo,
      GR_QUEUE_SEMAPHORE * pSemaphore );

   alias da_grOpenPeerMemory = GR_RESULT function(
      GR_DEVICE device,
      const( GR_PEER_MEMORY_OPEN_INFO ) * pOpenInfo,
      GR_GPU_MEMORY * pMem );

   alias da_grOpenPeerImage = GR_RESULT function(
      GR_DEVICE device,
      const( GR_PEER_IMAGE_OPEN_INFO ) * pOpenInfo,
      GR_IMAGE * pImage,
      GR_GPU_MEMORY * pMem );

   /* Command Buffer Management Functions */
   alias da_grCreateCommandBuffer = GR_RESULT function(
      GR_DEVICE device,
      const( GR_CMD_BUFFER_CREATE_INFO ) * pCreateInfo,
      GR_CMD_BUFFER * pCmdBuffer );

   alias da_grBeginCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer,
      GR_FLAGS      flags );

   alias da_grEndCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer );

   alias da_grResetCommandBuffer = GR_RESULT function(
      GR_CMD_BUFFER cmdBuffer );

   /* Command Buffer Building Functions */
   alias da_grCmdBindPipeline = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_PIPELINE   pipeline );

   alias da_grCmdBindStateObject = GR_VOID function(
      GR_CMD_BUFFER   cmdBuffer,
      GR_ENUM         stateBindPoint,
      GR_STATE_OBJECT state );

   alias da_grCmdBindDescriptorSet = GR_VOID function(
      GR_CMD_BUFFER     cmdBuffer,
      GR_ENUM           pipelineBindPoint,
      GR_UINT           index,
      GR_DESCRIPTOR_SET descriptorSet,
      GR_UINT           slotOffset );

   alias da_grCmdBindDynamicMemoryView = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      const( GR_MEMORY_VIEW_ATTACH_INFO ) * pMemView );

   alias da_grCmdBindIndexData = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset,
      GR_ENUM       indexType );

   alias da_grCmdBindTargets = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT       colorTargetCount,
      const( GR_COLOR_TARGET_BIND_INFO  ) * pColorTargets,
      const( GR_DEPTH_STENCIL_BIND_INFO ) * pDepthTarget );

   alias da_grCmdPrepareMemoryRegions = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT transitionCount,
      const( GR_MEMORY_STATE_TRANSITION ) * pStateTransitions );

   alias da_grCmdPrepareImages = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT transitionCount,
      const( GR_IMAGE_STATE_TRANSITION ) * pStateTransitions );

   alias da_grCmdDraw = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT firstVertex,
      GR_UINT vertexCount,
      GR_UINT firstInstance,
      GR_UINT instanceCount );

   alias da_grCmdDrawIndexed = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT firstIndex,
      GR_UINT indexCount,
      GR_INT  vertexOffset,
      GR_UINT firstInstance,
      GR_UINT instanceCount );

   alias da_grCmdDrawIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdDrawIndexedIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdDispatch = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_UINT x,
      GR_UINT y,
      GR_UINT z );

   alias da_grCmdDispatchIndirect = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY mem,
      GR_GPU_SIZE   offset );

   alias da_grCmdCopyMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY srcMem,
      GR_GPU_MEMORY destMem,
      GR_UINT       regionCount,
      const( GR_MEMORY_COPY ) * pRegions );

   alias da_grCmdCopyImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_IMAGE_COPY ) * pRegions );

   alias da_grCmdCopyMemoryToImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY srcMem,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_MEMORY_IMAGE_COPY ) * pRegions );

   alias da_grCmdCopyImageToMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_GPU_MEMORY destMem,
      GR_UINT       regionCount,
      const( GR_MEMORY_IMAGE_COPY ) * pRegions );

   alias da_grCmdResolveImage = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_IMAGE      destImage,
      GR_UINT       regionCount,
      const( GR_IMAGE_RESOLVE ) * pRegions );

   alias da_grCmdCloneImageData = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      srcImage,
      GR_ENUM       srcImageState,
      GR_IMAGE      destImage,
      GR_ENUM       destImageState );

   alias da_grCmdUpdateMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_GPU_SIZE   dataSize,
      const( GR_UINT32 ) * pData );

   alias da_grCmdFillMemory = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_GPU_SIZE   fillSize,
      GR_UINT32     data );

   alias da_grCmdClearColorImage = GR_VOID function(
      GR_CMD_BUFFER    cmdBuffer,
      GR_IMAGE         image,
      const GR_FLOAT * color, //color[4]
      GR_UINT          rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdClearColorImageRaw = GR_VOID function(
      GR_CMD_BUFFER     cmdBuffer,
      GR_IMAGE          image,
      const GR_UINT32 * color, //color[4]
      GR_UINT           rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdClearDepthStencil = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_IMAGE      image,
      GR_FLOAT      depth,
      GR_UINT8      stencil,
      GR_UINT       rangeCount,
      const( GR_IMAGE_SUBRESOURCE_RANGE ) * pRanges );

   alias da_grCmdSetEvent = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_EVENT      event );

   alias da_grCmdResetEvent = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_EVENT      event );

   alias da_grCmdMemoryAtomic = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset,
      GR_UINT64     srcData,
      GR_ENUM       atomicOp );
      
   alias da_grCmdBeginQuery = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       slot,
      GR_FLAGS      flags );


   alias da_grCmdEndQuery = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       slot );

   alias da_grCmdResetQueryPool = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_QUERY_POOL queryPool,
      GR_UINT       startQuery,
      GR_UINT       queryCount );

   alias da_grCmdWriteTimestamp = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       timestampType,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset );

   alias da_grCmdInitAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      const( GR_UINT32 ) * pData );

   alias da_grCmdLoadAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      GR_GPU_MEMORY srcMem,
      GR_GPU_SIZE   srcOffset );

   alias da_grCmdSaveAtomicCounters = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM       pipelineBindPoint,
      GR_UINT       startCounter,
      GR_UINT       counterCount,
      GR_GPU_MEMORY destMem,
      GR_GPU_SIZE   destOffset );

   /* Debug and Validation Functions */
   alias da_grDbgSetValidationLevel = GR_RESULT function(
      GR_DEVICE device,
      GR_ENUM   validationLevel );

   alias da_grDbgRegisterMsgCallback = GR_RESULT function(
      GR_DBG_MSG_CALLBACK_FUNCTION pfnMsgCallback,
      GR_VOID * pUserData );

   alias da_grDbgUnregisterMsgCallback = GR_RESULT function(
      GR_DBG_MSG_CALLBACK_FUNCTION pfnMsgCallback );

   alias da_grDbgSetMessageFilter = GR_RESULT function(
      GR_DEVICE device,
      GR_ENUM   msgCode,
      GR_ENUM   filter );

   alias da_grDbgSetObjectTag = GR_RESULT function(
      GR_BASE_OBJECT object,
      GR_SIZE tagSize,
      const( GR_VOID ) * pTag );

   alias da_grDbgSetGlobalOption = GR_RESULT function(
      GR_DBG_GLOBAL_OPTION dbgOption,
      GR_SIZE dataSize,
      const( GR_VOID ) * pData);

   alias da_grDbgSetDeviceOption = GR_RESULT function(
      GR_DEVICE device,
      GR_DBG_DEVICE_OPTION dbgOption,
      GR_SIZE dataSize,
      const( GR_VOID ) * pData);

   alias da_grCmdDbgMarkerBegin = GR_RESULT function(
      GR_CMD_BUFFER   cmdBuffer,
      const GR_CHAR * pMarker );

   alias da_grCmdDbgMarkerEnd = GR_RESULT function(
      GR_CMD_BUFFER   cmdBuffer );
}


__gshared  {
   da_grInitAndEnumerateGpus           grInitAndEnumerateGpus;
   da_grGetGpuInfo                     grGetGpuInfo;
   da_grCreateDevice                   grCreateDevice;
   da_grDestroyDevice                  grDestroyDevice;
   da_grGetExtensionSupport            grGetExtensionSupport;
   da_grGetDeviceQueue                 grGetDeviceQueue;
   da_grQueueWaitIdle                  grQueueWaitIdle;
   da_grDeviceWaitIdle                 grDeviceWaitIdle;
   da_grQueueSubmit                    grQueueSubmit;
   da_grQueueSetGlobalMemReferences    grQueueSetGlobalMemReferences;
   da_grGetMemoryHeapCount             grGetMemoryHeapCount;
   da_grGetMemoryHeapInfo              grGetMemoryHeapInfo;
   da_grAllocMemory                    grAllocMemory;
   da_grFreeMemory                     grFreeMemory;
   da_grSetMemoryPriority              grSetMemoryPriority;
   da_grMapMemory                      grMapMemory;
   da_grUnmapMemory                    grUnmapMemory;
   da_grRemapVirtualMemoryPages        grRemapVirtualMemoryPages;
   da_grPinSystemMemory                grPinSystemMemory;
   da_grDestroyObject                  grDestroyObject;
   da_grGetObjectInfo                  grGetObjectInfo;
   da_grBindObjectMemory               grBindObjectMemory;
   da_grGetFormatInfo                  grGetFormatInfo;
   da_grCreateImage                    grCreateImage;
   da_grGetImageSubresourceInfo        grGetImageSubresourceInfo;
   da_grCreateSampler                  grCreateSampler;
   da_grCreateImageView                grCreateImageView;
   da_grCreateColorTargetView          grCreateColorTargetView;
   da_grCreateDepthStencilView         grCreateDepthStencilView;
   da_grCreateShader                   grCreateShader;
   da_grCreateGraphicsPipeline         grCreateGraphicsPipeline;
   da_grCreateComputePipeline          grCreateComputePipeline;
   da_grStorePipeline                  grStorePipeline;
   da_grLoadPipeline                   grLoadPipeline;
   da_grCreateDescriptorSet            grCreateDescriptorSet;
   da_grBeginDescriptorSetUpdate       grBeginDescriptorSetUpdate;
   da_grEndDescriptorSetUpdate         grEndDescriptorSetUpdate;
   da_grAttachSamplerDescriptors       grAttachSamplerDescriptors;
   da_grAttachImageViewDescriptors     grAttachImageViewDescriptors;
   da_grAttachMemoryViewDescriptors    grAttachMemoryViewDescriptors;
   da_grAttachNestedDescriptors        grAttachNestedDescriptors;
   da_grClearDescriptorSetSlots        grClearDescriptorSetSlots;
   da_grCreateViewportState            grCreateViewportState;
   da_grCreateRasterState              grCreateRasterState;
   da_grCreateColorBlendState          grCreateColorBlendState;
   da_grCreateDepthStencilState        grCreateDepthStencilState;
   da_grCreateMsaaState                grCreateMsaaState;
   da_grCreateQueryPool                grCreateQueryPool;
   da_grGetQueryPoolResults            grGetQueryPoolResults;
   da_grCreateFence                    grCreateFence;
   da_grGetFenceStatus                 grGetFenceStatus;
   da_grWaitForFences                  grWaitForFences;
   da_grCreateQueueSemaphore           grCreateQueueSemaphore;
   da_grSignalQueueSemaphore           grSignalQueueSemaphore;
   da_grWaitQueueSemaphore             grWaitQueueSemaphore;
   da_grCreateEvent                    grCreateEvent;
   da_grGetEventStatus                 grGetEventStatus;
   da_grSetEvent                       grSetEvent;
   da_grResetEvent                     grResetEvent;
   da_grGetMultiGpuCompatibility       grGetMultiGpuCompatibility;
   da_grOpenSharedMemory               grOpenSharedMemory;
   da_grOpenSharedQueueSemaphore       grOpenSharedQueueSemaphore;
   da_grOpenPeerMemory                 grOpenPeerMemory;
   da_grOpenPeerImage                  grOpenPeerImage;
   da_grCreateCommandBuffer            grCreateCommandBuffer;
   da_grBeginCommandBuffer             grBeginCommandBuffer;
   da_grEndCommandBuffer               grEndCommandBuffer;
   da_grResetCommandBuffer             grResetCommandBuffer;
   da_grCmdBindPipeline                grCmdBindPipeline;
   da_grCmdBindStateObject             grCmdBindStateObject;
   da_grCmdBindDescriptorSet           grCmdBindDescriptorSet;
   da_grCmdBindDynamicMemoryView       grCmdBindDynamicMemoryView;
   da_grCmdBindIndexData               grCmdBindIndexData;
   da_grCmdBindTargets                 grCmdBindTargets;
   da_grCmdPrepareMemoryRegions        grCmdPrepareMemoryRegions;
   da_grCmdPrepareImages               grCmdPrepareImages;
   da_grCmdDraw                        grCmdDraw;
   da_grCmdDrawIndexed                 grCmdDrawIndexed;
   da_grCmdDrawIndirect                grCmdDrawIndirect;
   da_grCmdDrawIndexedIndirect         grCmdDrawIndexedIndirect;
   da_grCmdDispatch                    grCmdDispatch;
   da_grCmdDispatchIndirect            grCmdDispatchIndirect;
   da_grCmdCopyMemory                  grCmdCopyMemory;
   da_grCmdCopyImage                   grCmdCopyImage;
   da_grCmdCopyMemoryToImage           grCmdCopyMemoryToImage;
   da_grCmdCopyImageToMemory           grCmdCopyImageToMemory;
   da_grCmdResolveImage                grCmdResolveImage;
   da_grCmdCloneImageData              grCmdCloneImageData;
   da_grCmdUpdateMemory                grCmdUpdateMemory;
   da_grCmdFillMemory                  grCmdFillMemory;
   da_grCmdClearColorImage             grCmdClearColorImage;
   da_grCmdClearColorImageRaw          grCmdClearColorImageRaw;
   da_grCmdClearDepthStencil           grCmdClearDepthStencil;
   da_grCmdSetEvent                    grCmdSetEvent;
   da_grCmdResetEvent                  grCmdResetEvent;
   da_grCmdMemoryAtomic                grCmdMemoryAtomic;
   da_grCmdBeginQuery                  grCmdBeginQuery;
   da_grCmdEndQuery                    grCmdEndQuery;
   da_grCmdResetQueryPool              grCmdResetQueryPool;
   da_grCmdWriteTimestamp              grCmdWriteTimestamp;
   da_grCmdInitAtomicCounters          grCmdInitAtomicCounters;
   da_grCmdLoadAtomicCounters          grCmdLoadAtomicCounters;
   da_grCmdSaveAtomicCounters          grCmdSaveAtomicCounters;
   
   da_grDbgSetValidationLevel          grDbgSetValidationLevel;
   da_grDbgRegisterMsgCallback         grDbgRegisterMsgCallback;
   da_grDbgUnregisterMsgCallback       grDbgUnregisterMsgCallback;
   da_grDbgSetMessageFilter            grDbgSetMessageFilter;
   da_grDbgSetObjectTag                grDbgSetObjectTag;
   da_grDbgSetGlobalOption             grDbgSetGlobalOption;
   da_grDbgSetDeviceOption             grDbgSetDeviceOption;
   da_grCmdDbgMarkerBegin              grCmdDbgMarkerBegin;
   da_grCmdDbgMarkerEnd                grCmdDbgMarkerEnd;
}

ShouldThrow missingSymbol( string symbol )  {
   return ShouldThrow.Yes;
}

class DerelictMantleLoader : SharedLibLoader {
   public this()  {
      super( libNames );
   }

   protected override void loadSymbols()  {
      bindFunc( cast( void ** ) & grInitAndEnumerateGpus,         "grInitAndEnumerateGpus" );
      bindFunc( cast( void ** ) & grGetGpuInfo,                   "grGetGpuInfo" );
      bindFunc( cast( void ** ) & grCreateDevice,                 "grCreateDevice" );
      bindFunc( cast( void ** ) & grDestroyDevice,                "grDestroyDevice" );
      bindFunc( cast( void ** ) & grGetExtensionSupport,          "grGetExtensionSupport" );
      bindFunc( cast( void ** ) & grGetDeviceQueue,               "grGetDeviceQueue" );
      bindFunc( cast( void ** ) & grQueueWaitIdle,                "grQueueWaitIdle" );
      bindFunc( cast( void ** ) & grDeviceWaitIdle,               "grDeviceWaitIdle" );
      bindFunc( cast( void ** ) & grQueueSubmit,                  "grQueueSubmit" );
      bindFunc( cast( void ** ) & grQueueSetGlobalMemReferences,  "grQueueSetGlobalMemReferences" );
      bindFunc( cast( void ** ) & grGetMemoryHeapCount,           "grGetMemoryHeapCount" );
      bindFunc( cast( void ** ) & grGetMemoryHeapInfo,            "grGetMemoryHeapInfo" );
      bindFunc( cast( void ** ) & grAllocMemory,                  "grAllocMemory" );
      bindFunc( cast( void ** ) & grFreeMemory,                   "grFreeMemory" );
      bindFunc( cast( void ** ) & grSetMemoryPriority,            "grSetMemoryPriority" );
      bindFunc( cast( void ** ) & grMapMemory,                    "grMapMemory" );
      bindFunc( cast( void ** ) & grUnmapMemory,                  "grUnmapMemory" );
      bindFunc( cast( void ** ) & grRemapVirtualMemoryPages,      "grRemapVirtualMemoryPages" );
      bindFunc( cast( void ** ) & grPinSystemMemory,              "grPinSystemMemory" );
      bindFunc( cast( void ** ) & grDestroyObject,                "grDestroyObject" );
      bindFunc( cast( void ** ) & grGetObjectInfo,                "grGetObjectInfo" );
      bindFunc( cast( void ** ) & grBindObjectMemory,             "grBindObjectMemory" );
      bindFunc( cast( void ** ) & grGetFormatInfo,                "grGetFormatInfo" );
      bindFunc( cast( void ** ) & grCreateImage,                  "grCreateImage" );
      bindFunc( cast( void ** ) & grGetImageSubresourceInfo,      "grGetImageSubresourceInfo" );
      bindFunc( cast( void ** ) & grCreateSampler,                "grCreateSampler" );
      bindFunc( cast( void ** ) & grCreateImageView,              "grCreateImageView" );
      bindFunc( cast( void ** ) & grCreateColorTargetView,        "grCreateColorTargetView" );
      bindFunc( cast( void ** ) & grCreateDepthStencilView,       "grCreateDepthStencilView" );
      bindFunc( cast( void ** ) & grCreateShader,                 "grCreateShader" );
      bindFunc( cast( void ** ) & grCreateGraphicsPipeline,       "grCreateGraphicsPipeline" );
      bindFunc( cast( void ** ) & grCreateComputePipeline,        "grCreateComputePipeline" );
      bindFunc( cast( void ** ) & grStorePipeline,                "grStorePipeline" );
      bindFunc( cast( void ** ) & grLoadPipeline,                 "grLoadPipeline" );
      bindFunc( cast( void ** ) & grCreateDescriptorSet,          "grCreateDescriptorSet" );
      bindFunc( cast( void ** ) & grBeginDescriptorSetUpdate,     "grBeginDescriptorSetUpdate" );
      bindFunc( cast( void ** ) & grEndDescriptorSetUpdate,       "grEndDescriptorSetUpdate" );
      bindFunc( cast( void ** ) & grAttachSamplerDescriptors,     "grAttachSamplerDescriptors" );
      bindFunc( cast( void ** ) & grAttachImageViewDescriptors,   "grAttachImageViewDescriptors" );
      bindFunc( cast( void ** ) & grAttachMemoryViewDescriptors,  "grAttachMemoryViewDescriptors" );
      bindFunc( cast( void ** ) & grAttachNestedDescriptors,      "grAttachNestedDescriptors" );
      bindFunc( cast( void ** ) & grClearDescriptorSetSlots,      "grClearDescriptorSetSlots" );
      bindFunc( cast( void ** ) & grCreateViewportState,          "grCreateViewportState" );
      bindFunc( cast( void ** ) & grCreateRasterState,            "grCreateRasterState" );
      bindFunc( cast( void ** ) & grCreateColorBlendState,        "grCreateColorBlendState" );
      bindFunc( cast( void ** ) & grCreateDepthStencilState,      "grCreateDepthStencilState" );
      bindFunc( cast( void ** ) & grCreateMsaaState,              "grCreateMsaaState" );
      bindFunc( cast( void ** ) & grCreateQueryPool,              "grCreateQueryPool" );
      bindFunc( cast( void ** ) & grGetQueryPoolResults,          "grGetQueryPoolResults" );
      bindFunc( cast( void ** ) & grCreateFence,                  "grCreateFence" );
      bindFunc( cast( void ** ) & grGetFenceStatus,               "grGetFenceStatus" );
      bindFunc( cast( void ** ) & grWaitForFences,                "grWaitForFences" );
      bindFunc( cast( void ** ) & grCreateQueueSemaphore,         "grCreateQueueSemaphore" );
      bindFunc( cast( void ** ) & grSignalQueueSemaphore,         "grSignalQueueSemaphore" );
      bindFunc( cast( void ** ) & grWaitQueueSemaphore,           "grWaitQueueSemaphore" );
      bindFunc( cast( void ** ) & grCreateEvent,                  "grCreateEvent" );
      bindFunc( cast( void ** ) & grGetEventStatus,               "grGetEventStatus" );
      bindFunc( cast( void ** ) & grSetEvent,                     "grSetEvent" );
      bindFunc( cast( void ** ) & grResetEvent,                   "grResetEvent" );
      bindFunc( cast( void ** ) & grGetMultiGpuCompatibility,     "grGetMultiGpuCompatibility" );
      bindFunc( cast( void ** ) & grOpenSharedMemory,             "grOpenSharedMemory" );
      bindFunc( cast( void ** ) & grOpenSharedQueueSemaphore,     "grOpenSharedQueueSemaphore" );
      bindFunc( cast( void ** ) & grOpenPeerMemory,               "grOpenPeerMemory" );
      bindFunc( cast( void ** ) & grOpenPeerImage,                "grOpenPeerImage" );
      bindFunc( cast( void ** ) & grCreateCommandBuffer,          "grCreateCommandBuffer" );
      bindFunc( cast( void ** ) & grBeginCommandBuffer,           "grBeginCommandBuffer" );
      bindFunc( cast( void ** ) & grEndCommandBuffer,             "grEndCommandBuffer" );
      bindFunc( cast( void ** ) & grResetCommandBuffer,           "grResetCommandBuffer" );
      bindFunc( cast( void ** ) & grCmdBindPipeline,              "grCmdBindPipeline" );
      bindFunc( cast( void ** ) & grCmdBindStateObject,           "grCmdBindStateObject" );
      bindFunc( cast( void ** ) & grCmdBindDescriptorSet,         "grCmdBindDescriptorSet" );
      bindFunc( cast( void ** ) & grCmdBindDynamicMemoryView,     "grCmdBindDynamicMemoryView" );
      bindFunc( cast( void ** ) & grCmdBindIndexData,             "grCmdBindIndexData" );
      bindFunc( cast( void ** ) & grCmdBindTargets,               "grCmdBindTargets" );
      bindFunc( cast( void ** ) & grCmdPrepareMemoryRegions,      "grCmdPrepareMemoryRegions" );
      bindFunc( cast( void ** ) & grCmdPrepareImages,             "grCmdPrepareImages" );
      bindFunc( cast( void ** ) & grCmdDraw,                      "grCmdDraw" );
      bindFunc( cast( void ** ) & grCmdDrawIndexed,               "grCmdDrawIndexed" );
      bindFunc( cast( void ** ) & grCmdDrawIndirect,              "grCmdDrawIndirect" );
      bindFunc( cast( void ** ) & grCmdDrawIndexedIndirect,       "grCmdDrawIndexedIndirect" );
      bindFunc( cast( void ** ) & grCmdDispatch,                  "grCmdDispatch" );
      bindFunc( cast( void ** ) & grCmdDispatchIndirect,          "grCmdDispatchIndirect" );
      bindFunc( cast( void ** ) & grCmdCopyMemory,                "grCmdCopyMemory" );
      bindFunc( cast( void ** ) & grCmdCopyImage,                 "grCmdCopyImage" );
      bindFunc( cast( void ** ) & grCmdCopyMemoryToImage,         "grCmdCopyMemoryToImage" );
      bindFunc( cast( void ** ) & grCmdCopyImageToMemory,         "grCmdCopyImageToMemory" );
      bindFunc( cast( void ** ) & grCmdResolveImage,              "grCmdResolveImage" );
      bindFunc( cast( void ** ) & grCmdCloneImageData,            "grCmdCloneImageData" );
      bindFunc( cast( void ** ) & grCmdUpdateMemory,              "grCmdUpdateMemory" );
      bindFunc( cast( void ** ) & grCmdFillMemory,                "grCmdFillMemory" );
      bindFunc( cast( void ** ) & grCmdClearColorImage,           "grCmdClearColorImage" );
      bindFunc( cast( void ** ) & grCmdClearColorImageRaw,        "grCmdClearColorImageRaw" );
      bindFunc( cast( void ** ) & grCmdClearDepthStencil,         "grCmdClearDepthStencil" );
      bindFunc( cast( void ** ) & grCmdSetEvent,                  "grCmdSetEvent" );
      bindFunc( cast( void ** ) & grCmdResetEvent,                "grCmdResetEvent" );
      bindFunc( cast( void ** ) & grCmdMemoryAtomic,              "grCmdMemoryAtomic" );
      bindFunc( cast( void ** ) & grCmdBeginQuery,                "grCmdBeginQuery" );
      bindFunc( cast( void ** ) & grCmdEndQuery,                  "grCmdEndQuery" );
      bindFunc( cast( void ** ) & grCmdResetQueryPool,            "grCmdResetQueryPool" );
      bindFunc( cast( void ** ) & grCmdWriteTimestamp,            "grCmdWriteTimestamp" );
      bindFunc( cast( void ** ) & grCmdInitAtomicCounters,        "grCmdInitAtomicCounters" );
      bindFunc( cast( void ** ) & grCmdLoadAtomicCounters,        "grCmdLoadAtomicCounters" );
      bindFunc( cast( void ** ) & grCmdSaveAtomicCounters,        "grCmdSaveAtomicCounters" );


      bindFunc( cast( void ** ) & grDbgSetValidationLevel,        "grDbgSetValidationLevel" );
      bindFunc( cast( void ** ) & grDbgRegisterMsgCallback,       "grDbgRegisterMsgCallback" );
      bindFunc( cast( void ** ) & grDbgUnregisterMsgCallback,     "grDbgUnregisterMsgCallback" );
      bindFunc( cast( void ** ) & grDbgSetMessageFilter,          "grDbgSetMessageFilter" );
      bindFunc( cast( void ** ) & grDbgSetObjectTag,              "grDbgSetObjectTag" );
      bindFunc( cast( void ** ) & grDbgSetGlobalOption,           "grDbgSetGlobalOption" );
      bindFunc( cast( void ** ) & grDbgSetDeviceOption,           "grDbgSetDeviceOption" );
      bindFunc( cast( void ** ) & grCmdDbgMarkerBegin,            "grCmdDbgMarkerBegin" );
      bindFunc( cast( void ** ) & grCmdDbgMarkerEnd,              "grCmdDbgMarkerEnd" );

      /* WSI Extension Functions */
      bindFunc( cast( void ** ) & grWsiWinGetDisplays,                 "grWsiWinGetDisplays" );
      bindFunc( cast( void ** ) & grWsiWinGetDisplayModeList,          "grWsiWinGetDisplayModeList" );
      bindFunc( cast( void ** ) & grWsiWinTakeFullscreenOwnership,     "grWsiWinTakeFullscreenOwnership" );
      bindFunc( cast( void ** ) & grWsiWinReleaseFullscreenOwnership,  "grWsiWinReleaseFullscreenOwnership" );
      bindFunc( cast( void ** ) & grWsiWinSetGammaRamp,                "grWsiWinSetGammaRamp" );
      bindFunc( cast( void ** ) & grWsiWinWaitForVerticalBlank,        "grWsiWinWaitForVerticalBlank" );
      bindFunc( cast( void ** ) & grWsiWinGetScanLine,                 "grWsiWinGetScanLine" );
      bindFunc( cast( void ** ) & grWsiWinCreatePresentableImage,      "grWsiWinCreatePresentableImage" );
      bindFunc( cast( void ** ) & grWsiWinQueuePresent,                "grWsiWinQueuePresent" );
      bindFunc( cast( void ** ) & grWsiWinSetMaxQueuedFrames,          "grWsiWinSetMaxQueuedFrames" );

      /* AXL Extension Functions and Versioning */
      bindFunc( cast( void ** ) & grGetExtensionLibraryVersion,        "grGetExtensionLibraryVersion" );
      bindFunc( cast( void ** ) & grCreateBorderColorPalette,          "grCreateBorderColorPalette" );
      bindFunc( cast( void ** ) & grUpdateBorderColorPalette,          "grUpdateBorderColorPalette" );
      bindFunc( cast( void ** ) & grCmdBindBorderColorPalette,         "grCmdBindBorderColorPalette" );
      bindFunc( cast( void ** ) & grCreateAdvancedMsaaState,           "grCreateAdvancedMsaaState" );
      bindFunc( cast( void ** ) & grCreateFmaskImageView,              "grCreateFmaskImageView" );
      bindFunc( cast( void ** ) & grCmdCopyOcclusionData,              "grCmdCopyOcclusionData" );
      bindFunc( cast( void ** ) & grCmdSetOcclusionPredication,        "grCmdSetOcclusionPredication" );
      bindFunc( cast( void ** ) & grCmdResetOcclusionPredication,      "grCmdResetOcclusionPredication" );
      bindFunc( cast( void ** ) & grCmdSetMemoryPredication,           "grCmdSetMemoryPredication" );
      bindFunc( cast( void ** ) & grCmdResetMemoryPredication,         "grCmdResetMemoryPredication" );
      bindFunc( cast( void ** ) & grCmdIf,                             "grCmdIf" );
      bindFunc( cast( void ** ) & grCmdElse,                           "grCmdElse" );
      bindFunc( cast( void ** ) & grCmdEndIf,                          "grCmdEndIf" );
      bindFunc( cast( void ** ) & grCmdWhile,                          "grCmdWhile" );
      bindFunc( cast( void ** ) & grCmdEndWhile,                       "grCmdEndWhile" );
      bindFunc( cast( void ** ) & grQueueDelay,                        "grQueueDelay" );
      bindFunc( cast( void ** ) & grCalibrateGpuTimestamp,             "grCalibrateGpuTimestamp" );
   }
}

__gshared DerelictMantleLoader DerelictMantle;

shared static this()  {
    DerelictMantle = new DerelictMantleLoader();
    DerelictMantle.missingSymbolCallback( & missingSymbol );
}

/* --------------------------- */
/* AMD Extension Library (AXL) */
/* --------------------------- */

/* ------------------ */
/* Library Versioning */
/* ------------------ */

/* Library Versioning Enumerations */
enum /*GR_EXT_INFO_TYPE*/  {
   GR_EXT_INFO_TYPE_PHYSICAL_GPU_SUPPORTED_AXL_VERSION = 0x00306100,
}

/* Library Versioning Structures */
// AMD extension library interface encoded using the GR_MAKE_VERSION ( Unknown ) macro
struct GR_PHYSICAL_GPU_SUPPORTED_AXL_VERSION  {
    GR_UINT32 minVersion;
    GR_UINT32 maxVersion;
}

/* Library Versioning Functions */
extern( Windows ) @nogc nothrow  {
   alias da_grGetExtensionLibraryVersion = GR_UINT32 function();
}

__gshared  {
   da_grGetExtensionLibraryVersion grGetExtensionLibraryVersion;
}



/* --------------------- */
/* Windows WSI Extension */
/* --------------------- */

/* WSI Extension Object Handles */
alias GR_WSI_WIN_DISPLAY                     = uint;

/* WSI Extension Constants */
const int GR_MAX_DEVICE_NAME_LEN             = 255;   // Guess
const int GR_MAX_GAMMA_RAMP_CONTROL_POINTS   = 255;   // Guess

/* WSI Extension Enumerations */
alias GR_WSI_WIN_IMAGE_STATE                 = uint;
alias GR_WSI_WIN_PRESENT_MODE                = uint;

/* WSI Extension Flags */
alias GR_WSI_WIN_IMAGE_CREATE_FLAGS          = uint;
alias GR_WSI_WIN_PRESENT_FLAGS               = uint;

/* WSI Extension Enumerations */
enum /*GR_WSI_WIN_IMAGE_STATE*/  {
   GR_WSI_WIN_IMAGE_STATE_PRESENT_WINDOWED   = 0x00200000,
   GR_WSI_WIN_IMAGE_STATE_PRESENT_FULLSCREEN = 0x00200001,
}

enum /*GR_WSI_WIN_INFO_TYPE*/  {
   GR_WSI_WIN_INFO_TYPE_QUEUE_PROPERTIES             = 0x00206800,
   GR_WSI_WIN_INFO_TYPE_DISPLAY_PROPERTIES           = 0x00206801,
   GR_WSI_WIN_INFO_TYPE_GAMMA_RAMP_CAPABILITIES      = 0x00206802,
   GR_WSI_WIN_INFO_TYPE_DISPLAY_FREESYNC_SUPPORT     = 0x00206803,
   GR_WSI_WIN_INFO_TYPE_PRESENTABLE_IMAGE_PROPERTIES = 0x00206804,
   GR_WSI_WIN_INFO_TYPE_EXTENDED_DISPLAY_PROPERTIES  = 0x00206805,
}

enum /*GR_WSI_WIN_PRESENT_MODE*/  {
   GR_WSI_WIN_PRESENT_MODE_WINDOWED   = 0x00200200,
   GR_WSI_WIN_PRESENT_MODE_FULLSCREEN = 0x00200201,
}

enum /*GR_WSI_WIN_ROTATION_ANGLE*/  {
   GR_WSI_WIN_ROTATION_ANGLE_0   = 0x00200100,
   GR_WSI_WIN_ROTATION_ANGLE_90  = 0x00200101,
   GR_WSI_WIN_ROTATION_ANGLE_180 = 0x00200102,
   GR_WSI_WIN_ROTATION_ANGLE_270 = 0x00200103,
}

/* WSI Extension Flags */
enum /*GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS*/  {
   GR_WSI_WIN_WINDOWED_VBLANK_WAIT  = 0x00000001,
   GR_WSI_WIN_WINDOWED_GET_SCANLINE = 0x00000002,
}

enum /*GR_WSI_WIN_IMAGE_CREATE_FLAGS*/  {
   GR_WSI_WIN_IMAGE_CREATE_FULLSCREEN_PRESENT = 0x00000001,
   GR_WSI_WIN_IMAGE_CREATE_STEREO             = 0x00000002,
}

enum /*GR_WSI_WIN_PRESENT_FLAGS*/  {
   GR_WSI_WIN_PRESENT_FULLSCREEN_DONOTWAIT = 0x00000001,
   GR_WSI_WIN_PRESENT_FULLSCREEN_STEREO    = 0x00000002,
}

enum /*GR_WSI_WIN_PRESENT_SUPPORT_FLAGS*/  {
   GR_WSI_WIN_FULLSCREEN_PRESENT_SUPPORTED = 0x00000001,
   GR_WSI_WIN_WINDOWED_PRESENT_SUPPORTED   = 0x00000002,
}

/* WSI Extension Data Structures */
struct GR_RGB_FLOAT  {
   GR_FLOAT red;
   GR_FLOAT green;
   GR_FLOAT blue;
}

struct GR_WSI_WIN_DISPLAY_MODE  {
   GR_EXTENT2D extent;
   GR_FORMAT   format;
   GR_UINT     refreshRate;
   GR_BOOL     stereo;
   GR_BOOL     crossDisplayPresent;
}

alias void * HMONITOR;
struct GR_WSI_WIN_DISPLAY_PROPERTIES  {
   HMONITOR hMonitor;
   GR_CHAR[ GR_MAX_DEVICE_NAME_LEN ]  displayName;
   GR_RECT  desktopCoordinates;
   GR_ENUM  rotation;
}

struct GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES  {
   GR_FLAGS extendedProperties;
}

struct GR_WSI_WIN_GAMMA_RAMP  {
   GR_RGB_FLOAT  scale;
   GR_RGB_FLOAT  offset;
   GR_RGB_FLOAT[ GR_MAX_GAMMA_RAMP_CONTROL_POINTS ] gammaCurve;
}

struct GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES  {
   GR_BOOL   supportsScaleAndOffset;
   GR_FLOAT  minConvertedValue;
   GR_FLOAT  maxConvertedValue;
   GR_UINT   controlPointCount;
   GR_FLOAT[ GR_MAX_GAMMA_RAMP_CONTROL_POINTS ] controlPointPositions;
}

alias void * HWND;
struct GR_WSI_WIN_PRESENT_INFO  {
   HWND     hWndDest;
   GR_IMAGE srcImage;
   GR_ENUM  presentMode;
   GR_UINT  presentInterval;
   GR_FLAGS flags;
}

struct GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO  {
   GR_FORMAT          format;
   GR_FLAGS           usage;
   GR_EXTENT2D        extent;
   GR_WSI_WIN_DISPLAY display;
   GR_FLAGS           flags;
}

struct _GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES  {
   GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO createInfo;
   GR_GPU_MEMORY                            mem;
}

struct GR_WSI_WIN_QUEUE_PROPERTIES  {
   GR_FLAGS presentSupport;
}


/* WSI Extension Errors and Return Codes */
// GR_WSI_WIN_PRESENT_OCCLUDED
// GR_WSI_WIN_ERROR_FULLSCREEN_UNAVAILABLE
// GR_WSI_WIN_ERROR_DISPLAY_REMOVED
// GR_WSI_WIN_ERROR_INCOMPATIBLE_DISPLAY_MODE
// GR_WSI_WIN_ERROR_MULTI_DEVICE_PRESENT_FAILED
// GR_WSI_WIN_ERROR_WINDOWED_PRESENT_UNAVAILABLE
// GR_WSI_WIN_ERROR_INVALID_RESOLUTION

/* --------- */
/* Functions */
/* --------- */

extern( Windows ) @nogc nothrow  {

   /* WSI Extension Functions */
   alias da_grWsiWinGetDisplays = GR_RESULT function(
      GR_DEVICE device,
      GR_UINT * pDisplayCount,
      GR_WSI_WIN_DISPLAY * pDisplayList );

   alias da_grWsiWinGetDisplayModeList = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display,
      GR_UINT * pDisplayModeCount,
      GR_WSI_WIN_DISPLAY_MODE * pDisplayModeList );

   alias da_grWsiWinTakeFullscreenOwnership = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display,
      GR_IMAGE image );

   alias da_grWsiWinReleaseFullscreenOwnership = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display );

   alias da_grWsiWinSetGammaRamp = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display,
      const( GR_WSI_WIN_GAMMA_RAMP ) * pGammaRamp );

   alias da_grWsiWinWaitForVerticalBlank = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display );

   alias da_grWsiWinGetScanLine = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display,
      GR_INT * pScanLine );

   alias da_grWsiWinCreatePresentableImage = GR_RESULT function(
      GR_DEVICE device,
      const( GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE * pImage,
      GR_GPU_MEMORY * pMem );

   alias da_grWsiWinQueuePresent = GR_RESULT function(
      GR_QUEUE queue,
      const( GR_WSI_WIN_PRESENT_INFO ) * pPresentInfo );

   alias da_grWsiWinSetMaxQueuedFrames = GR_RESULT function(
      GR_WSI_WIN_DISPLAY display,
      GR_UINT maxFrames );
}


__gshared  {
   da_grWsiWinGetDisplays                 grWsiWinGetDisplays;
   da_grWsiWinGetDisplayModeList          grWsiWinGetDisplayModeList;
   da_grWsiWinTakeFullscreenOwnership     grWsiWinTakeFullscreenOwnership;
   da_grWsiWinReleaseFullscreenOwnership  grWsiWinReleaseFullscreenOwnership;
   da_grWsiWinSetGammaRamp                grWsiWinSetGammaRamp;
   da_grWsiWinWaitForVerticalBlank        grWsiWinWaitForVerticalBlank;
   da_grWsiWinGetScanLine                 grWsiWinGetScanLine;
   da_grWsiWinCreatePresentableImage      grWsiWinCreatePresentableImage;
   da_grWsiWinQueuePresent                grWsiWinQueuePresent;
   da_grWsiWinSetMaxQueuedFrames          grWsiWinSetMaxQueuedFrames;
}




/* ------------------------------ */
/* Border Color Palette Extension */
/* ------------------------------ */

/* Border Color Palette Extension  Object Handles */
alias GR_BORDER_COLOR_PALETTE       = uint;

/* Border Color Palette Extension Enumerations */
enum /*GR_EXT_BORDER_COLOR_TYPE*/  {
   GR_EXT_BORDER_COLOR_TYPE_PALETTE_ENTRY_0 = 0x0030a000,
}

enum /*GR_EXT_INFO_TYPE*/  {
   GR_EXT_INFO_TYPE_QUEUE_BORDER_COLOR_PALETTE_PROPERTIES = 0x00306800,
}

/* Border Color Palette Extension Data Structures */
struct GR_BORDER_COLOR_PALETTE_PROPERTIES  {
   GR_UINT maxPaletteSize;
}

struct GR_BORDER_COLOR_PALETTE_CREATE_INFO  {
   GR_UINT paletteSize;
}

/* Border Color Palette Extension Functions */
extern( Windows ) @nogc nothrow  {

   alias da_grCreateBorderColorPalette = GR_RESULT function(
      GR_DEVICE device,
      const( GR_BORDER_COLOR_PALETTE_CREATE_INFO ) * pCreateInfo,
      GR_BORDER_COLOR_PALETTE * pPalette );

   alias da_grUpdateBorderColorPalette = GR_RESULT function(
      GR_BORDER_COLOR_PALETTE palette,
      GR_UINT firstEntry,
      GR_UINT entryCount,
      const( GR_FLOAT ) * pEntries);

   alias da_grCmdBindBorderColorPalette = GR_VOID function(
      GR_CMD_BUFFER cmdBuffer,
      GR_ENUM pipelineBindPoint,
      GR_BORDER_COLOR_PALETTE palette );
}

__gshared  {
   da_grCreateBorderColorPalette    grCreateBorderColorPalette;
   da_grUpdateBorderColorPalette    grUpdateBorderColorPalette;
   da_grCmdBindBorderColorPalette   grCmdBindBorderColorPalette;
}



/* -------------------------------- */
/* Advanced Multisampling Extension */
/* -------------------------------- */

/* Advanced Multisampling Extension Constants */
const int GR_MAX_MSAA_RASTERIZER_SAMPLES             = 16;   // Guess

/* Advanced Multisampling Extension Enumerations */
enum /*GR_EXT_IMAGE_STATE*/  {
   GR_EXT_IMAGE_STATE_GRAPHICS_SHADER_FMASK_LOOKUP = 0x00300100,
   GR_EXT_IMAGE_STATE_COMPUTE_SHADER_FMASK_LOOKUP  = 0x00300101,
} 

/* Advanced Multisampling Extension Data Structures */
struct GR_ADVANCED_MSAA_STATE_CREATE_INFO  {
   GR_UINT                     coverageSamples;
   GR_UINT                     pixelShaderSamples;
   GR_UINT                     depthStencilSamples;
   GR_UINT                     colorTargetSamples;
   GR_SAMPLE_MASK              sampleMask;
   GR_UINT                     sampleClusters;
   GR_UINT                     alphaToCoverageSamples;
   GR_BOOL                     disableAlphaToCoverageDither;
   GR_BOOL                     customSamplePatternEnable;
   GR_MSAA_QUAD_SAMPLE_PATTERN customSamplePattern;
}

struct GR_FMASK_IMAGE_VIEW_CREATE_INFO  {
   GR_IMAGE image;
   GR_UINT  baseArraySlice;
   GR_UINT  arraySize;
}

struct GR_MSAA_QUAD_SAMPLE_PATTERN  {
   GR_OFFSET2D[GR_MAX_MSAA_RASTERIZER_SAMPLES] topLeft;
   GR_OFFSET2D[GR_MAX_MSAA_RASTERIZER_SAMPLES] topRight;
   GR_OFFSET2D[GR_MAX_MSAA_RASTERIZER_SAMPLES] bottomLeft;
   GR_OFFSET2D[GR_MAX_MSAA_RASTERIZER_SAMPLES] bottomRight;
} 

/* Advanced Multisampling Extension Functions */
extern( Windows ) @nogc nothrow  {

   alias da_grCreateAdvancedMsaaState = GR_RESULT function(
      GR_DEVICE device,
      const( GR_ADVANCED_MSAA_STATE_CREATE_INFO ) * pCreateInfo,
      GR_MSAA_STATE_OBJECT * pState );

   alias da_grCreateFmaskImageView = GR_RESULT function(
      GR_DEVICE device,
      const( GR_FMASK_IMAGE_VIEW_CREATE_INFO ) * pCreateInfo,
      GR_IMAGE_VIEW * pView );
}

__gshared  {
   da_grCreateAdvancedMsaaState  grCreateAdvancedMsaaState;
   da_grCreateFmaskImageView     grCreateFmaskImageView;
}



/* ----------------------------------- */
/* Copy Occlusion Query Data Extension */
/* ----------------------------------- */

/* Copy Occlusion Query Data Extension Enumerations */
enum /*GR_EXT_MEMORY_STATE*/  {
    GR_EXT_MEMORY_STATE_COPY_OCCLUSION_DATA = 0x00300000,
}

/* Copy Occlusion Query Data Extension Functions */
extern( Windows ) @nogc nothrow  {

   // GR_RESULT as per API Reference seems ulikely, as all other grCmd functions return GR_VOID
   alias da_grCmdCopyOcclusionData = GR_VOID function(   // GR_RESULT as per API Reference seems ulikely
      GR_CMD_BUFFER  cmdBuffer,
      GR_QUERY_POOL  queryPool,
      GR_UINT        startQuery,
      GR_UINT        queryCount,
      GR_GPU_MEMORY  destMem,
      GR_GPU_SIZE    destOffset,
      GR_BOOL        accumulateData );
}

__gshared  {
   da_grCmdCopyOcclusionData grCmdCopyOcclusionData;
}



/* ------------------------------------- */
/* Command Buffer Control Flow Extension */
/* ------------------------------------- */

/* Command Buffer Control Flow Extension Enumerations */
enum /*GR_EXT_INFO_TYPE*/  {
   GR_EXT_INFO_TYPE_QUEUE_CONTROL_FLOW_PROPERTIES = 0x00306801,
}

enum /*GR_EXT_MEMORY_STATE*/  {
   GR_EXT_MEMORY_STATE_CMD_CONTROL = 0x00300001,
}

enum /*GR_EXT_OCCLUSION_CONDITION*/  {
   GR_EXT_OCCLUSION_CONDITION_VISIBLE     = 0x00300300,
   GR_EXT_OCCLUSION_CONDITION_INVISIBLE   = 0x00300301,
}

/* Command Buffer Control Flow Extension Flags */
enum /*GR_EXT_CONTROL_FLOW_FEATURE_FLAGS*/  {
   GR_EXT_CONTROL_FLOW_OCCLUSION_PREDICATION = 0x00000001,
   GR_EXT_CONTROL_FLOW_MEMORY_PREDICATION    = 0x00000002,
   GR_EXT_CONTROL_FLOW_CONDITIONAL_EXECUTION = 0x00000004,
   GR_EXT_CONTROL_FLOW_LOOP_EXECUTION        = 0x00000008,
}

/* Command Buffer Control Flow Extension Data Structures */
struct GR_QUEUE_CONTROL_FLOW_PROPERTIES  {
   GR_UINT  maxNestingLimit;
   GR_FLAGS controlFlowOperations;
} 

/* Command Buffer Control Flow Extension Functions */
extern( Windows ) @nogc nothrow  {

   alias da_grCmdSetOcclusionPredication = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer,
      GR_QUERY_POOL  queryPool,
      GR_UINT        slot,
      GR_ENUM        condition,
      GR_BOOL        waitResults,
      GR_BOOL        accumulateData );

   alias da_grCmdResetOcclusionPredication = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer );

   alias da_grCmdSetMemoryPredication = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer,
      GR_GPU_MEMORY  mem,
      GR_GPU_SIZE    offset );

   alias da_grCmdResetMemoryPredication = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer );

   alias da_grCmdIf = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer,
      GR_GPU_MEMORY  srcMem,
      GR_GPU_SIZE    srcOffset,
      GR_UINT64      data,
      GR_UINT64      mask,
      GR_ENUM        func );

   alias da_grCmdElse = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer );

   alias da_grCmdEndIf = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer );

   alias da_grCmdWhile = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer,
      GR_GPU_MEMORY  srcMem,
      GR_GPU_SIZE    srcOffset,
      GR_UINT64      data,
      GR_UINT64      mask,
      GR_ENUM        func );

   alias da_grCmdEndWhile = GR_VOID function(
      GR_CMD_BUFFER  cmdBuffer );
}

__gshared  {
   da_grCmdSetOcclusionPredication     grCmdSetOcclusionPredication;
   da_grCmdResetOcclusionPredication   grCmdResetOcclusionPredication;
   da_grCmdSetMemoryPredication        grCmdSetMemoryPredication;
   da_grCmdResetMemoryPredication      grCmdResetMemoryPredication;
   da_grCmdIf                          grCmdIf;
   da_grCmdElse                        grCmdElse;
   da_grCmdEndIf                       grCmdEndIf;
   da_grCmdWhile                       grCmdWhile;
   da_grCmdEndWhile                    grCmdEndWhile;
}



/* ------------------- */
/* DMA Queue Extension */
/* ------------------- */

/* DMA Queue Extension Enumerations */
enum /*GR_EXT_IMAGE_STATE*/  {
   GR_EXT_IMAGE_STATE_DATA_TRANSFER_DMA_QUEUE      = 0x00300102,
}

enum /*GR_EXT_QUEUE_TYPE*/  {
   GR_EXT_QUEUE_DMA   = 0x00300200,
} 



/* ------------------- */
/* Timer Queue Extension */
/* ------------------- */

/* Timer Queue Extension Enumerations */
enum /*GR_EXT_QUEUE_TYPE*/  {
    GR_EXT_QUEUE_TIMER = 0x00300201,
}

/* Timer Queue Extension Functions */
extern( Windows ) @nogc nothrow  {
   alias da_grQueueDelay = GR_RESULT function(
      GR_QUEUE queue,
      GR_FLOAT delay );
}

__gshared  {
   da_grQueueDelay grQueueDelay;
}



/* ------------------- */
/* GPU Timestamp Calibration Extension */
/* ------------------- */

/* GPU Timestamp Calibration Extension Structures */
struct GR_GPU_TIMESTAMP_CALIBRATION  {
    GR_UINT64 gpuTimestamp;
    union  {
        GR_UINT64    cpuWinPerfCounter;
        GR_BYTE[16]  _padding;
    }
}

/* GPU Timestamp Calibration Extension Functions */
extern( Windows ) @nogc nothrow  {
   alias da_grCalibrateGpuTimestamp = GR_RESULT function(
      GR_DEVICE device,
      GR_GPU_TIMESTAMP_CALIBRATION * pCalibrationData );
}

__gshared  {
   da_grCalibrateGpuTimestamp grCalibrateGpuTimestamp;
}



/* ------------------------------- */
/* Recource State Access Extension */
/* ------------------------------- */

/* Recource State Access Extension Enumerations */
enum /*GR_EXT_ACCESS_CLIENT*/  {
   GR_EXT_ACCESS_DEFAULT         = 0x00000000,
   GR_EXT_ACCESS_CPU             = 0x01000000,
   GR_EXT_ACCESS_UNIVERSAL_QUEUE = 0x02000000,
   GR_EXT_ACCESS_COMPUTE_QUEUE   = 0x04000000,
   GR_EXT_ACCESS_DMA_QUEUE       = 0x08000000,
}